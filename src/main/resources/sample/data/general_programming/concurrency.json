[
    {
        "question": "What is a thread?",
        "correctAnswers": ["A unit of execution in a process"],
        "incorrectAnswers": ["A file handler", "A network request", "A compiler directive"],
        "explanation": "A thread is the smallest unit of execution in a process, allowing parallelism.",
        "difficulty": 2,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What is a race condition?",
        "correctAnswers": ["A bug from unsynchronized thread access"],
        "incorrectAnswers": ["A memory leak", "A deadlock", "A loop error"],
        "explanation": "Race conditions occur when threads access shared data unsafely.",
        "difficulty": 3,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "Which Java keyword is used to control access to critical sections?",
        "correctAnswers": ["synchronized"],
        "incorrectAnswers": ["threadsafe", "atomic", "volatile"],
        "explanation": "`synchronized` ensures that only one thread can execute the block at a time.",
        "difficulty": 3,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What does 'deadlock' mean?",
        "correctAnswers": ["Two or more threads waiting forever on each other"],
        "incorrectAnswers": ["An infinite loop", "A memory overflow", "A scheduling conflict"],
        "explanation": "Deadlocks occur when threads wait on each other and none can proceed.",
        "difficulty": 4,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "Which mechanism ensures only one thread accesses a resource?",
        "correctAnswers": ["Mutex"],
        "incorrectAnswers": ["Array", "Semaphore", "Thread"],
        "explanation": "A mutex provides mutual exclusion for critical sections.",
        "difficulty": 3,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What is a thread pool?",
        "correctAnswers": ["A group of reusable threads"],
        "incorrectAnswers": ["A set of loops", "A process scheduler", "A network queue"],
        "explanation": "Thread pools allow thread reuse and efficient task execution.",
        "difficulty": 4,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What is the purpose of `join()` in threading?",
        "correctAnswers": ["Waits for a thread to finish"],
        "incorrectAnswers": ["Starts a thread", "Pauses a thread", "Kills a thread"],
        "explanation": "`join()` causes the calling thread to wait for another thread to finish.",
        "difficulty": 2,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What does 'atomic' mean in concurrency?",
        "correctAnswers": ["Operation that completes fully or not at all"],
        "incorrectAnswers": ["Runs slowly", "Depends on input", "Needs memory lock"],
        "explanation": "Atomic operations are indivisible and prevent race conditions.",
        "difficulty": 5,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "Which of these is a thread-safe data structure?",
        "correctAnswers": ["ConcurrentHashMap"],
        "incorrectAnswers": ["ArrayList", "HashSet", "TreeMap"],
        "explanation": "`ConcurrentHashMap` is designed for safe use by multiple threads.",
        "difficulty": 5,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What is a semaphore used for?",
        "correctAnswers": ["Controlling access to a resource"],
        "incorrectAnswers": ["Sorting arrays", "Compiling code", "Handling exceptions"],
        "explanation": "Semaphores manage resource access limits among threads.",
        "difficulty": 4,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "Which library provides concurrency utilities in Java?",
        "correctAnswers": ["java.util.concurrent"],
        "incorrectAnswers": ["java.lang.sync", "java.core.threads", "java.threading"],
        "explanation": "Java provides high-level concurrency tools in `java.util.concurrent`.",
        "difficulty": 4,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What is 'context switching'?",
        "correctAnswers": ["Switching CPU from one thread to another"],
        "incorrectAnswers": ["Switching variables", "Swapping memory pages", "Ending processes"],
        "explanation": "Context switching allows multitasking by swapping thread states.",
        "difficulty": 5,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What causes a livelock?",
        "correctAnswers": ["Threads constantly react to each other without progress"],
        "incorrectAnswers": ["Threads crash", "One thread uses all CPU", "Memory fills up"],
        "explanation": "In a livelock, threads change state but fail to complete tasks.",
        "difficulty": 6,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "Which thread state means it's ready to run but not yet running?",
        "correctAnswers": ["Runnable"],
        "incorrectAnswers": ["Blocked", "Waiting", "Terminated"],
        "explanation": "Runnable threads are scheduled to run by the OS.",
        "difficulty": 3,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "Which of these avoids deadlock?",
        "correctAnswers": ["Lock ordering"],
        "incorrectAnswers": ["Nested loops", "Thread.sleep()", "Using global variables"],
        "explanation": "Lock ordering ensures threads acquire locks in the same sequence.",
        "difficulty": 6,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What is `volatile` used for in Java?",
        "correctAnswers": ["To ensure visibility of changes across threads"],
        "incorrectAnswers": ["Prevent thread creation", "Make code faster", "Allocate memory"],
        "explanation": "A volatile variable guarantees visibility of updates between threads.",
        "difficulty": 5,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What is the fork/join framework used for?",
        "correctAnswers": ["Parallel task execution"],
        "incorrectAnswers": ["Thread sleeping", "Locking data", "Handling I/O"],
        "explanation": "Fork/join helps break tasks into subtasks for parallel processing.",
        "difficulty": 6,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "Which is true about immutable objects?",
        "correctAnswers": ["They are inherently thread-safe"],
        "incorrectAnswers": ["They can't be serialized", "They use more memory", "They require locks"],
        "explanation": "Immutable objects don't change, so concurrent access is safe.",
        "difficulty": 4,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "What is the main advantage of lock-free programming?",
        "correctAnswers": ["Reduced contention and improved performance"],
        "incorrectAnswers": ["Simpler code", "No need for variables", "More memory usage"],
        "explanation": "Lock-free code avoids blocking, improving throughput.",
        "difficulty": 7,
        "tags": ["programming", "concurrency"]
    },
    {
        "question": "Which pattern helps coordinate tasks with dependencies?",
        "correctAnswers": ["Barrier"],
        "incorrectAnswers": ["MapReduce", "Producer-Consumer", "Observer"],
        "explanation": "Barriers let threads wait until others reach the same point.",
        "difficulty": 6,
        "tags": ["programming", "concurrency"]
    }
]
