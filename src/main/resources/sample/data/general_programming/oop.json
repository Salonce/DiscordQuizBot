[
    {
        "question": "What does OOP stand for?",
        "correctAnswers": ["Object-Oriented Programming"],
        "incorrectAnswers": ["Open Output Protocol", "Operational Overhead Programming", "Object-Oriented Process"],
        "explanation": "OOP stands for Object-Oriented Programming, a paradigm based on the concept of objects.",
        "difficulty": 1,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which keyword is used to create a class in Java?",
        "correctAnswers": ["class"],
        "incorrectAnswers": ["define", "struct", "object"],
        "explanation": "In Java, the 'class' keyword is used to declare a new class.",
        "difficulty": 1,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which OOP principle is related to code reuse via inheritance?",
        "correctAnswers": ["Inheritance"],
        "incorrectAnswers": ["Encapsulation", "Polymorphism", "Abstraction"],
        "explanation": "Inheritance allows one class to acquire the properties and methods of another class.",
        "difficulty": 2,
        "tags": ["programming", "oop"]
    },
    {
        "question": "What is the purpose of a constructor?",
        "correctAnswers": ["Initialize an object"],
        "incorrectAnswers": ["Destroy an object", "Copy a file", "Compile a class"],
        "explanation": "A constructor is used to initialize objects of a class.",
        "difficulty": 2,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which principle hides internal object details?",
        "correctAnswers": ["Encapsulation"],
        "incorrectAnswers": ["Inheritance", "Composition", "Delegation"],
        "explanation": "Encapsulation restricts direct access to object components and is a key OOP concept.",
        "difficulty": 2,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which method is automatically called when an object is destroyed?",
        "correctAnswers": ["Destructor"],
        "incorrectAnswers": ["Constructor", "Cleaner", "Initializer"],
        "explanation": "A destructor is called to clean up before an object is removed from memory.",
        "difficulty": 3,
        "tags": ["programming", "oop"]
    },
    {
        "question": "What is polymorphism?",
        "correctAnswers": ["Same interface, different behavior"],
        "incorrectAnswers": ["Multiple inheritance", "Code duplication", "Hiding variables"],
        "explanation": "Polymorphism allows objects to be treated as instances of their parent class with behavior specific to the subclass.",
        "difficulty": 3,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which of these is not an OOP language?",
        "correctAnswers": ["SQL"],
        "incorrectAnswers": ["Java", "Python", "C++"],
        "explanation": "SQL is a declarative language used for querying databases, not an OOP language.",
        "difficulty": 2,
        "tags": ["programming", "oop"]
    },
    {
        "question": "What is 'this' keyword used for in OOP?",
        "correctAnswers": ["Refers to current object"],
        "incorrectAnswers": ["Creates a class", "Returns an object", "Imports a package"],
        "explanation": "'this' refers to the current instance of the class within its method or constructor.",
        "difficulty": 3,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which principle allows treating different objects through a common interface?",
        "correctAnswers": ["Polymorphism"],
        "incorrectAnswers": ["Encapsulation", "Recursion", "Iteration"],
        "explanation": "Polymorphism allows using a unified interface to work with different types of objects.",
        "difficulty": 4,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which design principle prefers composition over inheritance?",
        "correctAnswers": ["Favor composition"],
        "incorrectAnswers": ["Encapsulation principle", "Open-closed principle", "Single responsibility principle"],
        "explanation": "Favoring composition over inheritance encourages flexible code reuse and design.",
        "difficulty": 5,
        "tags": ["programming", "oop"]
    },
    {
        "question": "What is method overloading?",
        "correctAnswers": ["Same method name, different parameters"],
        "incorrectAnswers": ["Same parameters, different class", "Different return types", "Same method, different file"],
        "explanation": "Overloading allows multiple methods with the same name but different signatures in a class.",
        "difficulty": 4,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which visibility modifier restricts access to within the same class?",
        "correctAnswers": ["private"],
        "incorrectAnswers": ["protected", "public", "internal"],
        "explanation": "'private' limits access to the members within the same class only.",
        "difficulty": 2,
        "tags": ["programming", "oop"]
    },
    {
        "question": "What is an abstract class?",
        "correctAnswers": ["A class with unimplemented methods"],
        "incorrectAnswers": ["A class that cannot have children", "A static class", "A fully defined class"],
        "explanation": "An abstract class cannot be instantiated and can have abstract methods without implementation.",
        "difficulty": 5,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which is a benefit of OOP?",
        "correctAnswers": ["Code reuse"],
        "incorrectAnswers": ["More memory usage", "Tight coupling", "Slower development"],
        "explanation": "OOP promotes code reuse through inheritance and modular design.",
        "difficulty": 1,
        "tags": ["programming", "oop"]
    },
    {
        "question": "What is an interface in OOP?",
        "correctAnswers": ["A contract of methods to implement"],
        "incorrectAnswers": ["A GUI element", "A file format", "A class with fields"],
        "explanation": "An interface defines a set of methods that a class agrees to implement.",
        "difficulty": 5,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Can abstract classes have constructors?",
        "correctAnswers": ["Yes"],
        "incorrectAnswers": ["No", "Only static ones", "Only in interfaces"],
        "explanation": "Abstract classes can have constructors to initialize common fields.",
        "difficulty": 6,
        "tags": ["programming", "oop"]
    },
    {
        "question": "What is multiple inheritance?",
        "correctAnswers": ["A class inherits from multiple classes"],
        "incorrectAnswers": ["Class has multiple methods", "One class inherits many objects", "Class has many instances"],
        "explanation": "Multiple inheritance allows a class to inherit from more than one parent class.",
        "difficulty": 6,
        "tags": ["programming", "oop"]
    },
    {
        "question": "What problem does diamond inheritance cause?",
        "correctAnswers": ["Ambiguity"],
        "incorrectAnswers": ["Recursion", "Compilation error", "Memory leak"],
        "explanation": "Diamond inheritance causes ambiguity when two base classes implement the same method.",
        "difficulty": 7,
        "tags": ["programming", "oop"]
    },
    {
        "question": "Which OOP principle promotes separating what an object does from how?",
        "correctAnswers": ["Abstraction"],
        "incorrectAnswers": ["Inheritance", "Composition", "Polymorphism"],
        "explanation": "Abstraction hides implementation details and exposes only essential features.",
        "difficulty": 4,
        "tags": ["programming", "oop"]
    }
]