[
    {
        "id": 1073942,
        "question": "What does OOP stand for?",
        "correctAnswers": ["Object-Oriented Programming"],
        "incorrectAnswers": ["Objective Open Programming", "Object Option Processor", "Operation-Oriented Procedure"],
        "explanation": "OOP stands for Object-Oriented Programming, a paradigm based on objects and classes.",
        "difficulty": 5,
        "tags": ["programming", "oop"]
    },
    {
        "id": 8246719,
        "question": "Which OOP principle involves hiding internal details?",
        "correctAnswers": ["Encapsulation"],
        "incorrectAnswers": ["Polymorphism", "Inheritance", "Delegation"],
        "explanation": "Encapsulation hides internal state and behavior, exposing only necessary parts.",
        "difficulty": 10,
        "tags": ["programming", "oop"]
    },
    {
        "id": 2901386,
        "question": "What is a class?",
        "correctAnswers": ["A blueprint for objects"],
        "incorrectAnswers": ["A function block", "A program module", "A user input method"],
        "explanation": "A class defines properties and behaviors that its instances (objects) will have.",
        "difficulty": 12,
        "tags": ["programming", "oop"]
    },
    {
        "id": 4758213,
        "question": "What is an object?",
        "correctAnswers": ["An instance of a class"],
        "incorrectAnswers": ["A method call", "A return value", "A file handler"],
        "explanation": "An object is a concrete instance created from a class blueprint.",
        "difficulty": 14,
        "tags": ["programming", "oop"]
    },
    {
        "id": 9437162,
        "question": "What is inheritance?",
        "correctAnswers": ["Reusing class behavior"],
        "incorrectAnswers": ["Duplicating code", "Creating files", "Compiling classes"],
        "explanation": "Inheritance allows one class to use properties and methods from another.",
        "difficulty": 17,
        "tags": ["programming", "oop"]
    },
    {
        "id": 3285914,
        "question": "Which OOP principle allows different behaviors for the same method?",
        "correctAnswers": ["Polymorphism"],
        "incorrectAnswers": ["Abstraction", "Binding", "Overloading"],
        "explanation": "Polymorphism enables one method name to behave differently based on context or object.",
        "difficulty": 20,
        "tags": ["programming", "oop"]
    },
    {
        "id": 6942715,
        "question": "Which concept describes a simplified view of complexity?",
        "correctAnswers": ["Abstraction"],
        "incorrectAnswers": ["Encapsulation", "Concurrency", "Iteration"],
        "explanation": "Abstraction focuses on essential features while hiding the unnecessary ones.",
        "difficulty": 25,
        "tags": ["programming", "oop"]
    },
    {
        "id": 8115379,
        "question": "Which access modifier allows access from anywhere?",
        "correctAnswers": ["public"],
        "incorrectAnswers": ["private", "protected", "static"],
        "explanation": "The 'public' modifier means the member can be accessed from any class.",
        "difficulty": 30,
        "tags": ["programming", "oop"]
    },
    {
        "id": 5318270,
        "question": "What does 'this' refer to in a class method?",
        "correctAnswers": ["Current object"],
        "incorrectAnswers": ["Parent class", "Static context", "Global scope"],
        "explanation": "'this' refers to the current instance of the object calling the method.",
        "difficulty": 35,
        "tags": ["programming", "oop"]
    },
    {
        "id": 1796408,
        "question": "What is method overloading?",
        "correctAnswers": ["Same name, different parameters"],
        "incorrectAnswers": ["Multiple returns", "Different classes", "Private access"],
        "explanation": "Overloading allows multiple methods with the same name but different arguments.",
        "difficulty": 40,
        "tags": ["programming", "oop"]
    },
    {
        "id": 9463120,
        "question": "Which keyword prevents a class from being extended in Java?",
        "correctAnswers": ["final"],
        "incorrectAnswers": ["abstract", "static", "sealed"],
        "explanation": "The 'final' keyword in Java prevents a class from being subclassed.",
        "difficulty": 45,
        "tags": ["programming", "oop"]
    },
    {
        "id": 3281467,
        "question": "What does a constructor do?",
        "correctAnswers": ["Initializes an object"],
        "incorrectAnswers": ["Deletes memory", "Calls superclass", "Generates threads"],
        "explanation": "A constructor is a special method that initializes new objects.",
        "difficulty": 48,
        "tags": ["programming", "oop"]
    },
    {
        "id": 6219573,
        "question": "Which type of relationship is inheritance?",
        "correctAnswers": ["IS-A"],
        "incorrectAnswers": ["HAS-A", "CAN-DO", "USES-A"],
        "explanation": "Inheritance represents an IS-A relationship between a subclass and superclass.",
        "difficulty": 50,
        "tags": ["programming", "oop"]
    },
    {
        "id": 4058931,
        "question": "What is the role of an abstract class?",
        "correctAnswers": ["Defines partial behavior"],
        "incorrectAnswers": ["Implements all logic", "Stores data only", "Creates interfaces"],
        "explanation": "Abstract classes provide base definitions and may include unimplemented methods.",
        "difficulty": 60,
        "tags": ["programming", "oop"]
    },
    {
        "id": 9781230,
        "question": "Can interfaces have method bodies in Java?",
        "correctAnswers": ["Yes, with default methods"],
        "incorrectAnswers": ["No, never", "Only in constructors", "Only in static blocks"],
        "explanation": "Since Java 8, interfaces can have default and static method implementations.",
        "difficulty": 65,
        "tags": ["programming", "oop"]
    },
    {
        "id": 1640937,
        "question": "What is dynamic binding?",
        "correctAnswers": ["Runtime method resolution"],
        "incorrectAnswers": ["Compile-time linking", "Hard-coded logic", "Synchronous execution"],
        "explanation": "Dynamic binding means the method call is resolved at runtime, allowing polymorphism.",
        "difficulty": 70,
        "tags": ["programming", "oop"]
    },
    {
        "id": 3519806,
        "question": "What design pattern enforces a single instance?",
        "correctAnswers": ["Singleton"],
        "incorrectAnswers": ["Factory", "Observer", "Strategy"],
        "explanation": "The Singleton pattern ensures only one instance of a class exists.",
        "difficulty": 75,
        "tags": ["programming", "oop"]
    },
    {
        "id": 7352049,
        "question": "What is the main purpose of dependency injection?",
        "correctAnswers": ["Reduce coupling"],
        "incorrectAnswers": ["Speed up runtime", "Add more threads", "Increase memory"],
        "explanation": "Dependency injection allows components to be loosely coupled and testable.",
        "difficulty": 80,
        "tags": ["programming", "oop"]
    }
]
