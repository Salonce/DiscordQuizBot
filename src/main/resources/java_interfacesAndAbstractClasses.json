[
	{
		"question": "What is a key characteristic of an interface in Java?",
		"correctAnswers": ["Defines methods without implementations"],
		"incorrectAnswers": ["Defines methods with implementations", "Cannot be extended", "Only contains private methods"],
		"explanation": "An interface in Java defines a contract for a class, specifying methods without providing their implementations."
	},
	{
		"question": "How are abstract methods declared?",
		"correctAnswers": ["Using the 'abstract' keyword"],
		"incorrectAnswers": ["Using the 'final' keyword", "Using the 'static' keyword", "Without any keyword"],
		"explanation": "Abstract methods must be declared with the 'abstract' keyword and do not have a body."
	},
	{
		"question": "What is true about a class implementing an interface?",
		"correctAnswers": ["It must implement all abstract methods of the interface"],
		"incorrectAnswers": ["It can ignore some methods", "It automatically inherits implementation", "It cannot implement multiple interfaces"],
		"explanation": "A class implementing an interface must provide concrete implementations for all abstract methods defined in the interface."
	},
	{
		"question": "Can interfaces contain fields in Java?",
		"correctAnswers": ["Yes, but they must be public, static, and final"],
		"incorrectAnswers": ["No, interfaces cannot contain fields", "Yes, but they can be private", "Yes, but they must be instance variables"],
		"explanation": "Fields in interfaces are implicitly public, static, and final in Java."
	},
	{
		"question": "What access modifiers can methods in an interface have?",
		"correctAnswers": ["public"],
		"incorrectAnswers": ["private", "protected", "default"],
		"explanation": "Methods in an interface are implicitly public and abstract unless they are default or static."
	},
	{
		"question": "Which keyword is used to create an abstract class in Java?",
		"correctAnswers": ["abstract"],
		"incorrectAnswers": ["interface", "virtual", "static"],
		"explanation": "The 'abstract' keyword is used to define an abstract class in Java."
	},
	{
		"question": "What is the default access level for methods in an interface?",
		"correctAnswers": ["public"],
		"incorrectAnswers": ["protected", "private", "package-private"],
		"explanation": "Methods in an interface are public by default."
	},
	{
		"question": "Which of these is true about abstract classes in Java?",
		"correctAnswers": ["They can contain both abstract and concrete methods"],
		"incorrectAnswers": ["They can only contain abstract methods", "They cannot have constructors", "They cannot be extended"],
		"explanation": "Abstract classes in Java can have both abstract methods (without a body) and concrete methods (with implementation)."
	},
	{
		"question": "How do you extend an abstract class in Java?",
		"correctAnswers": ["Using the 'extends' keyword"],
		"incorrectAnswers": ["Using the 'implements' keyword", "Using the 'abstract' keyword", "Using the 'inherits' keyword"],
		"explanation": "The 'extends' keyword is used to inherit from an abstract class."
	},
	{
		"question": "Can a Java interface extend another interface?",
		"correctAnswers": ["Yes, using the 'extends' keyword"],
		"incorrectAnswers": ["No, interfaces cannot extend each other", "Yes, using the 'implements' keyword", "Yes, but only if it contains no methods"],
		"explanation": "Interfaces can extend other interfaces using the 'extends' keyword."
	},
	{
		"question": "What is the main purpose of an interface in Java?",
		"correctAnswers": ["To define a contract that implementing classes must follow"],
		"incorrectAnswers": ["To provide default method implementations", "To restrict inheritance", "To declare private methods"],
		"explanation": "An interface defines a set of abstract methods that implementing classes are required to implement."
	},
	{
		"question": "What happens if a class does not implement all methods of an interface?",
		"correctAnswers": ["The class must be declared abstract"],
		"incorrectAnswers": ["The program will compile with warnings", "The methods will have default implementations", "The class will throw an error at runtime"],
		"explanation": "If a class does not implement all methods of an interface, it must be declared abstract."
	},
	{
		"question": "Which type of methods can abstract classes include?",
		"correctAnswers": ["Both abstract and concrete methods"],
		"incorrectAnswers": ["Only concrete methods", "Only abstract methods", "Only private methods"],
		"explanation": "Abstract classes can have both abstract methods (without a body) and concrete methods (with implementation)."
	},
	{
		"question": "Can an interface provide method implementation in Java?",
		"correctAnswers": ["Yes, using default or static methods"],
		"incorrectAnswers": ["No, interfaces cannot provide implementation", "Yes, but only static methods", "Yes, but only abstract methods"],
		"explanation": "Since Java 8, interfaces can provide method implementations using default or static methods."
	},
	{
		"question": "Can an abstract class be instantiated?",
		"correctAnswers": ["No, it cannot be instantiated"],
		"incorrectAnswers": ["Yes, but only if it has concrete methods", "Yes, by using its abstract methods", "Yes, through a reference variable"],
		"explanation": "Abstract classes cannot be instantiated because they are incomplete by nature."
	},
	{
		"question": "How many interfaces can a class implement?",
		"correctAnswers": ["It can implement multiple interfaces"],
		"incorrectAnswers": ["It can implement only one interface", "It cannot implement interfaces", "It depends on the JVM"],
		"explanation": "Java allows a class to implement multiple interfaces, enabling multiple inheritance of type."
	},
	{
		"question": "Can a Java interface have private methods?",
		"correctAnswers": ["Yes, since Java 9"],
		"incorrectAnswers": ["No, interfaces cannot have private methods", "Yes, but only static methods", "Yes, but only default methods"],
		"explanation": "Private methods were introduced in Java 9 to enable better code reuse within interfaces."
	},
	{
		"question": "What does the 'implements' keyword signify in Java?",
		"correctAnswers": ["A class is implementing an interface"],
		"incorrectAnswers": ["A class is inheriting from another class", "An interface is inheriting another interface", "A class is extending an abstract class"],
		"explanation": "The 'implements' keyword is used to indicate that a class is implementing an interface."
	},
	{
		"question": "Which of the following is true about constructors in abstract classes?",
		"correctAnswers": ["Abstract classes can have constructors"],
		"incorrectAnswers": ["Abstract classes cannot have constructors", "Abstract classes must define a constructor", "Constructors in abstract classes must be private"],
		"explanation": "Abstract classes can have constructors, which are used to initialize fields of the abstract class."
	},
	{
		"question": "What is the difference between an abstract class and an interface in Java?",
		"correctAnswers": ["Abstract classes can have fields and constructors, interfaces cannot"],
		"incorrectAnswers": ["Interfaces can have constructors, abstract classes cannot", "Abstract classes must have only abstract methods", "Interfaces cannot be extended"],
		"explanation": "Abstract classes can have fields, constructors, and methods with implementations, while interfaces cannot have constructors and their fields are always static and final."
	},
    {
        "question": "What is the default value of fields in a Java interface?",
        "correctAnswers": ["They are implicitly initialized with their default values"],
        "incorrectAnswers": ["They must be explicitly initialized", "They are uninitialized until runtime", "They cannot have default values"],
        "explanation": "Fields in a Java interface are implicitly public, static, and final and are initialized with their default values."
    },
    {
        "question": "Which of the following is NOT true about Java interfaces?",
        "correctAnswers": ["They cannot have instance variables"],
        "incorrectAnswers": ["They can extend multiple interfaces", "They can contain default methods", "They can be implemented by multiple classes"],
        "explanation": "Interfaces in Java cannot have instance variables because all fields are implicitly static and final."
    },
    {
        "question": "Can abstract classes implement interfaces?",
        "correctAnswers": ["Yes, they can partially or fully implement interfaces"],
        "incorrectAnswers": ["No, only concrete classes can implement interfaces", "Yes, but only fully implement them", "No, abstract classes and interfaces are mutually exclusive"],
        "explanation": "Abstract classes can implement interfaces, either partially or fully, as they can contain both abstract and concrete methods."
    },
    {
        "question": "What is the relationship between abstract classes and polymorphism?",
        "correctAnswers": ["Abstract classes allow for runtime polymorphism"],
        "incorrectAnswers": ["Abstract classes cannot participate in polymorphism", "Polymorphism only applies to interfaces", "Polymorphism requires concrete classes"],
        "explanation": "Abstract classes support runtime polymorphism by allowing derived classes to override their methods."
    },
    {
        "question": "Which of the following can an abstract class NOT do?",
        "correctAnswers": ["Be directly instantiated"],
        "incorrectAnswers": ["Contain concrete methods", "Extend another abstract class", "Contain abstract methods"],
        "explanation": "Abstract classes cannot be instantiated directly because they are incomplete by design."
    },
    {
        "question": "How does Java handle multiple inheritance with interfaces?",
        "correctAnswers": ["A class can implement multiple interfaces"],
        "incorrectAnswers": ["A class can inherit one interface and extend one class", "A class can implement only one interface", "Interfaces cannot be used for inheritance"],
        "explanation": "Java supports multiple inheritance through interfaces by allowing a class to implement multiple interfaces."
    },
    {
        "question": "What does it mean if a class implements multiple interfaces?",
        "correctAnswers": ["It must provide implementations for methods from all interfaces"],
        "incorrectAnswers": ["It must extend all interfaces", "It cannot extend any class", "It cannot use constructors"],
        "explanation": "When a class implements multiple interfaces, it is required to provide concrete implementations for all their abstract methods."
    },
    {
        "question": "Can an interface in Java inherit from multiple interfaces?",
        "correctAnswers": ["Yes, using the 'extends' keyword"],
        "incorrectAnswers": ["No, it can extend only one interface", "Yes, using the 'implements' keyword", "No, interfaces cannot inherit from other interfaces"],
        "explanation": "Java interfaces can extend multiple other interfaces using the 'extends' keyword, enabling a form of multiple inheritance."
    },
    {
        "question": "What is the use of a default method in a Java interface?",
        "correctAnswers": ["To provide a concrete implementation in the interface"],
        "incorrectAnswers": ["To make the method optional to implement", "To define a static utility method", "To restrict method visibility"],
        "explanation": "Default methods, introduced in Java 8, allow interfaces to have methods with a concrete implementation."
    },
    {
        "question": "Can an interface method be static?",
        "correctAnswers": ["Yes, it can be static"],
        "incorrectAnswers": ["No, interface methods cannot be static", "Yes, but only if it is private", "Yes, but only if it is abstract"],
        "explanation": "Since Java 8, static methods are allowed in interfaces, enabling utility methods to be included."
    },
    {
        "question": "Can abstract methods in Java have a body?",
        "correctAnswers": ["No, they cannot have a body"],
        "incorrectAnswers": ["Yes, but only in abstract classes", "Yes, but only in interfaces", "Yes, if marked as default"],
        "explanation": "Abstract methods are declared without a body and must be implemented by subclasses or implementing classes."
    },
    {
        "question": "What does the term 'functional interface' refer to in Java?",
        "correctAnswers": ["An interface with exactly one abstract method"],
        "incorrectAnswers": ["An interface with only static methods", "An interface used only for lambda expressions", "An interface with any number of methods"],
        "explanation": "A functional interface is an interface with a single abstract method, often used with lambda expressions and method references."
    },
    {
        "question": "What is the annotation used to indicate a functional interface?",
        "correctAnswers": ["@FunctionalInterface"],
        "incorrectAnswers": ["@Override", "@Interface", "@Lambda"],
        "explanation": "The @FunctionalInterface annotation ensures that the interface contains exactly one abstract method."
    },
    {
        "question": "Which of the following is NOT allowed in an abstract class?",
        "correctAnswers": ["Direct instantiation"],
        "incorrectAnswers": ["Concrete methods", "Fields and constructors", "Static methods"],
        "explanation": "Abstract classes cannot be instantiated directly because they are incomplete by design."
    },
    {
        "question": "What is the key purpose of an abstract method?",
        "correctAnswers": ["To enforce method implementation in derived classes"],
        "incorrectAnswers": ["To provide reusable logic", "To create a default implementation", "To restrict method accessibility"],
        "explanation": "Abstract methods define a contract that must be fulfilled by subclasses, ensuring specific methods are implemented."
    },
    {
        "question": "What happens if two interfaces have methods with the same signature?",
        "correctAnswers": ["The implementing class must override the method"],
        "incorrectAnswers": ["The method is inherited from the first declared interface", "The method cannot be implemented", "The method is implemented twice"],
        "explanation": "If multiple interfaces have methods with the same signature, the implementing class must provide an override to resolve the ambiguity."
    },
    {
        "question": "What is the primary restriction of fields in interfaces?",
        "correctAnswers": ["They are implicitly public, static, and final"],
        "incorrectAnswers": ["They can be instance variables", "They can have protected access", "They can be mutable"],
        "explanation": "Fields in interfaces are implicitly public, static, and final, making them constants accessible globally."
    },
    {
        "question": "Can an abstract class have a main method in Java?",
        "correctAnswers": ["Yes, it can have a main method"],
        "incorrectAnswers": ["No, abstract classes cannot have a main method", "Yes, but it cannot execute", "Yes, but only for testing purposes"],
        "explanation": "An abstract class can have a main method and be used as an entry point to a program, even though it cannot be instantiated."
    },
    {
        "question": "What is the return type of the 'compareTo' method in the Comparable interface?",
        "correctAnswers": ["int"],
        "incorrectAnswers": ["boolean", "void", "double"],
        "explanation": "The 'compareTo' method in the Comparable interface returns an integer value indicating the order of the objects."
    },
    {
        "question": "What happens if a class extends an abstract class but does not override all its abstract methods?",
        "correctAnswers": ["The subclass must also be declared abstract"],
        "incorrectAnswers": ["The program will throw a runtime error", "The subclass will inherit the abstract methods", "The compiler will generate default implementations"],
        "explanation": "If a class does not override all abstract methods of an abstract superclass, it must be declared abstract itself."
    },
    {
        "question": "What is the difference between interfaces and abstract classes regarding constructors?",
        "correctAnswers": ["Abstract classes can have constructors, interfaces cannot"],
        "incorrectAnswers": ["Interfaces can have constructors, abstract classes cannot", "Both can have constructors", "Neither can have constructors"],
        "explanation": "Abstract classes can define constructors, but interfaces cannot have constructors as they cannot be instantiated."
    },
    {
        "question": "What keyword must be used when inheriting from an abstract class?",
        "correctAnswers": ["extends"],
        "incorrectAnswers": ["implements", "inherits", "abstract"],
        "explanation": "The 'extends' keyword is used to inherit from an abstract class in Java."
    },
    {
        "question": "Can an interface in Java have a private static method?",
        "correctAnswers": ["Yes, since Java 9"],
        "incorrectAnswers": ["No, interfaces cannot have private static methods", "Yes, but only if they are final", "Yes, but only if the interface is abstract"],
        "explanation": "Java 9 introduced private static methods in interfaces to allow better code encapsulation and reuse within the interface."
    },
    {
        "question": "Can abstract classes be marked as final?",
        "correctAnswers": ["No, they cannot be marked as final"],
        "incorrectAnswers": ["Yes, but they cannot have subclasses", "Yes, but they must have only static methods", "No, but they cannot have abstract methods"],
        "explanation": "Abstract classes cannot be marked as final because doing so would prevent them from being subclassed, which defeats their purpose."
    },
    {
        "question": "What is the purpose of the 'default' keyword in interface methods?",
        "correctAnswers": ["To define a concrete method in an interface"],
        "incorrectAnswers": ["To make a method optional", "To declare a method as final", "To restrict method access"],
        "explanation": "The 'default' keyword allows interfaces to provide a concrete method implementation."
    },
    {
        "question": "Can an interface extend another interface and implement a class?",
        "correctAnswers": ["No, interfaces cannot implement classes"],
        "incorrectAnswers": ["Yes, they can extend interfaces and implement classes", "Yes, but only abstract classes", "No, they cannot extend interfaces either"],
        "explanation": "Interfaces can extend other interfaces but cannot implement classes as they lack the ability to provide implementations."
    },
    {
        "question": "How can you make a class abstract?",
        "correctAnswers": ["By using the 'abstract' keyword in the class declaration"],
        "incorrectAnswers": ["By leaving one method undefined", "By using the 'interface' keyword", "By not providing any constructors"],
        "explanation": "A class is made abstract by declaring it with the 'abstract' keyword in its definition."
    },
    {
        "question": "What happens if a class implements two interfaces with identical default methods?",
        "correctAnswers": ["The class must override the conflicting method"],
        "incorrectAnswers": ["The method from the first interface is used", "The method from the second interface is used", "The method is inherited without conflict"],
        "explanation": "If two interfaces have identical default methods, the implementing class must provide an override to resolve the conflict."
    },
    {
        "question": "What is the correct way to specify that a class implements multiple interfaces?",
        "correctAnswers": ["Separate the interface names with commas"],
        "incorrectAnswers": ["Use multiple 'implements' keywords", "List them in square brackets", "Provide one interface per line"],
        "explanation": "When a class implements multiple interfaces, the names of the interfaces are separated by commas in the class declaration."
    },
    {
        "question": "Can an abstract class contain static methods?",
        "correctAnswers": ["Yes, it can contain static methods"],
        "incorrectAnswers": ["No, it cannot contain static methods", "Yes, but only if they are private", "Yes, but only if they are abstract"],
        "explanation": "Abstract classes can include static methods, which are accessible without creating an instance of the class."
    },
    {
        "question": "What modifier must abstract methods have in an abstract class?",
        "correctAnswers": ["They must have the 'abstract' modifier"],
        "incorrectAnswers": ["They must have the 'static' modifier", "They must have the 'final' modifier", "They do not require any modifier"],
        "explanation": "Abstract methods in an abstract class must be explicitly marked with the 'abstract' modifier."
    },
    {
        "question": "Can an abstract class implement an interface and still have abstract methods?",
        "correctAnswers": ["Yes, it can partially implement the interface"],
        "incorrectAnswers": ["No, it must implement all interface methods", "Yes, but only if the interface methods are static", "No, an abstract class cannot implement interfaces"],
        "explanation": "Abstract classes can implement interfaces but are not required to implement all of the interface's methods, as they can still declare them abstract."
    },
    {
        "question": "How does Java resolve a conflict between a default method in an interface and a method in a superclass?",
        "correctAnswers": ["The method in the superclass takes precedence"],
        "incorrectAnswers": ["The default method in the interface takes precedence", "The class must override the method", "Java cannot resolve such conflicts"],
        "explanation": "If a superclass and an interface provide methods with the same signature, the method from the superclass takes precedence."
    },
    {
        "question": "What happens if you declare an interface method as final?",
        "correctAnswers": ["It results in a compilation error"],
        "incorrectAnswers": ["The method is treated as a default method", "The method is treated as a static method", "The method is ignored by the compiler"],
        "explanation": "Interface methods cannot be declared as final because they are meant to be overridden by implementing classes."
    },
    {
        "question": "What is the default behavior of methods in abstract classes?",
        "correctAnswers": ["They can be either abstract or concrete"],
        "incorrectAnswers": ["They are all abstract", "They are all concrete", "They must be overridden in subclasses"],
        "explanation": "Abstract classes can contain both abstract methods (without implementation) and concrete methods (with implementation)."
    },
    {
        "question": "Can interfaces in Java have nested types?",
        "correctAnswers": ["Yes, interfaces can contain nested types"],
        "incorrectAnswers": ["No, interfaces cannot contain nested types", "Yes, but only nested interfaces", "Yes, but only if they are abstract"],
        "explanation": "Interfaces can contain nested types, including classes, interfaces, and enums."
    },
    {
        "question": "Can you override a static method in an abstract class?",
        "correctAnswers": ["No, static methods cannot be overridden"],
        "incorrectAnswers": ["Yes, static methods can be overridden", "Yes, but only in interfaces", "Yes, but they must be abstract"],
        "explanation": "Static methods are associated with the class, not instances, so they cannot be overridden."
    },
    {
        "question": "What is the purpose of the 'implements' keyword?",
        "correctAnswers": ["It indicates that a class is implementing an interface"],
        "incorrectAnswers": ["It indicates that a class is extending another class", "It is used to declare an abstract class", "It is used to initialize interface methods"],
        "explanation": "The 'implements' keyword specifies that a class is implementing the methods defined in an interface."
    },
    {
        "question": "Can an abstract class have final methods?",
        "correctAnswers": ["Yes, it can have final methods"],
        "incorrectAnswers": ["No, abstract classes cannot have final methods", "Yes, but only if they are static", "Yes, but only if they are private"],
        "explanation": "Abstract classes can have final methods, which cannot be overridden by subclasses."
    },
    {
        "question": "How can a class inherit behavior from an interface?",
        "correctAnswers": ["By implementing the interface"],
        "incorrectAnswers": ["By extending the interface", "By using the 'inherits' keyword", "By declaring the interface as abstract"],
        "explanation": "A class inherits behavior from an interface by implementing it and providing concrete definitions for its methods."
    }
]
