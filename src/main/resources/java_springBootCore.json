[
    {
        "question": "Which annotation is used to designate a class as a Spring Boot application entry point?",
        "correctAnswers": ["@SpringBootApplication"],
        "incorrectAnswers": ["@ComponentScan", "@EnableAutoConfiguration", "@RestController"],
        "explanation": "The @SpringBootApplication annotation is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan for a Spring Boot application."
    },
    {
        "question": "What is the default embedded web server in Spring Boot?",
        "correctAnswers": ["Tomcat"],
        "incorrectAnswers": ["Jetty", "Undertow", "Resin"],
        "explanation": "Spring Boot provides Tomcat as the default embedded web server, but Jetty and Undertow are also supported."
    },
    {
        "question": "Which property is used to configure the port of a Spring Boot application?",
        "correctAnswers": ["server.port"],
        "incorrectAnswers": ["application.port", "server.http.port", "spring.port"],
        "explanation": "The property 'server.port' is used to specify the HTTP port that the Spring Boot application listens to."
    },
    {
        "question": "What annotation is used to create a RESTful web service controller in Spring Boot?",
        "correctAnswers": ["@RestController"],
        "incorrectAnswers": ["@Controller", "@Service", "@Component"],
        "explanation": "The @RestController annotation combines @Controller and @ResponseBody, making it easier to create RESTful web services."
    },
    {
        "question": "Which configuration file format is typically used in Spring Boot for application properties?",
        "correctAnswers": ["application.properties"],
        "incorrectAnswers": ["application.xml", "application.json", "application.conf"],
        "explanation": "Spring Boot uses 'application.properties' or 'application.yml' for configuration properties."
    },
    {
        "question": "Which dependency is required to create a Spring Boot application with a web module?",
        "correctAnswers": ["spring-boot-starter-web"],
        "incorrectAnswers": ["spring-boot-starter-data", "spring-boot-starter-mvc", "spring-boot-starter-jdbc"],
        "explanation": "The 'spring-boot-starter-web' dependency includes libraries necessary for developing web applications, including RESTful services."
    },
    {
        "question": "What is the default logging framework used by Spring Boot?",
        "correctAnswers": ["Logback"],
        "incorrectAnswers": ["Log4j", "SLF4J", "Commons Logging"],
        "explanation": "Spring Boot uses Logback as the default logging framework, which is an implementation of SLF4J."
    },
    {
        "question": "What does Spring Boot's @EnableAutoConfiguration annotation do?",
        "correctAnswers": ["Automatically configures Spring components based on dependencies"],
        "incorrectAnswers": ["Disables manual configuration of components", "Enables global application settings", "Adds default security rules to the application"],
        "explanation": "@EnableAutoConfiguration scans the classpath for dependencies and configures beans automatically based on them."
    },
    {
        "question": "Which file is used to package a Spring Boot application as an executable JAR?",
        "correctAnswers": ["pom.xml"],
        "incorrectAnswers": ["build.gradle", "application.yml", "settings.gradle"],
        "explanation": "Spring Boot applications use Maven's 'pom.xml' file to define dependencies and package settings for an executable JAR."
    },
    {
        "question": "What is the role of the Spring Boot Actuator module?",
        "correctAnswers": ["To provide production-ready application monitoring and management features"],
        "incorrectAnswers": ["To enhance logging capabilities", "To manage security configurations", "To integrate database connections"],
        "explanation": "Spring Boot Actuator includes features for monitoring and managing applications in production environments."
    },
    {
        "question": "Which annotation is used to map HTTP GET requests in Spring Boot?",
        "correctAnswers": ["@GetMapping"],
        "incorrectAnswers": ["@RequestMapping", "@PostMapping", "@PutMapping"],
        "explanation": "@GetMapping is a shortcut annotation that maps HTTP GET requests to specific handler methods."
    },
    {
        "question": "Which application file can be used for hierarchical configuration in Spring Boot?",
        "correctAnswers": ["application.yml"],
        "incorrectAnswers": ["application.env", "application.txt", "application.properties"],
        "explanation": "Spring Boot supports YAML configuration files through 'application.yml', which allows hierarchical configuration."
    },
    {
        "question": "Which command is used to run a Spring Boot application packaged as a JAR?",
        "correctAnswers": ["java -jar <jar-file>"],
        "incorrectAnswers": ["spring run <jar-file>", "boot -execute <jar-file>", "java -execute <jar-file>"],
        "explanation": "To run a Spring Boot JAR file, you use the 'java -jar <jar-file>' command."
    },
    {
        "question": "What is the default scope of a Spring Boot bean?",
        "correctAnswers": ["Singleton"],
        "incorrectAnswers": ["Prototype", "Request", "Session"],
        "explanation": "In Spring Boot, the default bean scope is Singleton, meaning only one instance of the bean is created and shared across the application."
    },
    {
        "question": "Which annotation in Spring Boot tests disables the full startup of the application?",
        "correctAnswers": ["@MockBean"],
        "incorrectAnswers": ["@SpringBootTest", "@TestConfiguration", "@EnableTestRestTemplate"],
        "explanation": "The @MockBean annotation is used to mock beans and avoid the full application startup in tests."
    },
    {
        "question": "What is Spring Boot DevTools used for?",
        "correctAnswers": ["Automatic application restarts and development conveniences"],
        "incorrectAnswers": ["Monitoring production applications", "Enabling database migrations", "Adding security configurations"],
        "explanation": "Spring Boot DevTools includes features like automatic restart and live reload to improve the development experience."
    },
    {
        "question": "Which annotation is used to test a Spring Boot application context?",
        "correctAnswers": ["@SpringBootTest"],
        "incorrectAnswers": ["@RunWith", "@ContextTest", "@SpringTest"],
        "explanation": "The @SpringBootTest annotation loads the complete application context for testing."
    },
    {
        "question": "What does the 'spring.datasource.url' property configure?",
        "correctAnswers": ["The database connection URL"],
        "incorrectAnswers": ["The JPA repository location", "The JDBC driver class", "The ORM mapping file"],
        "explanation": "'spring.datasource.url' specifies the database URL for connecting to the database in Spring Boot."
    },
    {
        "question": "Which annotation is used to exclude a class from component scanning in Spring Boot?",
        "correctAnswers": ["@ComponentScan.ExcludeFilter"],
        "incorrectAnswers": ["@ExcludeComponent", "@DisableScan", "@NoScan"],
        "explanation": "The @ComponentScan.ExcludeFilter annotation is used to exclude specific classes or packages from component scanning."
    },
    {
        "question": "Which Spring Boot feature simplifies dependency management?",
        "correctAnswers": ["Spring Boot Starters"],
        "incorrectAnswers": ["Spring Initializer", "Dependency Scanner", "Bean Mapper"],
        "explanation": "Spring Boot Starters are a set of dependency descriptors that simplify the inclusion of related dependencies in a project."
    },
    {
        "question": "Which annotation is used to define the main configuration class in Spring Boot?",
        "correctAnswers": ["@Configuration"],
        "incorrectAnswers": ["@EnableConfiguration", "@ConfigurableClass", "@MainConfig"],
        "explanation": "@Configuration marks a class as a source of bean definitions for the Spring IoC container."
    },
    {
        "question": "Which property can be used to enable debugging logs in a Spring Boot application?",
        "correctAnswers": ["debug=true"],
        "incorrectAnswers": ["logging.debug=true", "debug.logging.enabled=true", "spring.debug.mode=true"],
        "explanation": "Setting 'debug=true' in the application.properties enables detailed debugging logs in Spring Boot."
    },
    {
        "question": "Which annotation is used to bind application properties to a Java class?",
        "correctAnswers": ["@ConfigurationProperties"],
        "incorrectAnswers": ["@PropertySource", "@EnableProperties", "@SettingsProperties"],
        "explanation": "The @ConfigurationProperties annotation binds external configuration properties to Java bean fields."
    },
    {
        "question": "Which dependency is required to use JPA in a Spring Boot application?",
        "correctAnswers": ["spring-boot-starter-data-jpa"],
        "incorrectAnswers": ["spring-boot-starter-data", "spring-boot-starter-orm", "spring-boot-starter-sql"],
        "explanation": "'spring-boot-starter-data-jpa' includes Hibernate and other libraries for using JPA in Spring Boot."
    },
    {
        "question": "Which annotation is used to declare a scheduled task in Spring Boot?",
        "correctAnswers": ["@Scheduled"],
        "incorrectAnswers": ["@TaskScheduled", "@CronJob", "@TimedTask"],
        "explanation": "@Scheduled is used to declare methods as scheduled tasks with specified intervals or cron expressions."
    },
    {
        "question": "What does the 'spring.datasource.driver-class-name' property configure?",
        "correctAnswers": ["The database driver class name"],
        "incorrectAnswers": ["The database connection URL", "The database username", "The ORM configuration class"],
        "explanation": "'spring.datasource.driver-class-name' specifies the fully qualified class name of the database driver."
    },
    {
        "question": "Which annotation is used to specify initialization logic in Spring beans?",
        "correctAnswers": ["@PostConstruct"],
        "incorrectAnswers": ["@AfterInit", "@BeanInit", "@BeforeStart"],
        "explanation": "@PostConstruct is used to annotate a method that will be executed after the bean initialization process is complete."
    },
    {
        "question": "Which property configures the default logging level in Spring Boot?",
        "correctAnswers": ["logging.level"],
        "incorrectAnswers": ["log.level", "spring.logging.default", "logger.default.level"],
        "explanation": "The 'logging.level' property allows you to set the logging level for different packages and classes."
    },
    {
        "question": "What is the primary purpose of Spring Boot's @Value annotation?",
        "correctAnswers": ["To inject values from properties files or environment variables"],
        "incorrectAnswers": ["To define a constant in the application", "To configure component scanning", "To set default values in beans"],
        "explanation": "@Value is used to inject values from properties files, system properties, or environment variables into fields."
    },
    {
        "question": "What does the @SpringBootTest annotation do in a test class?",
        "correctAnswers": ["Loads the full application context for testing"],
        "incorrectAnswers": ["Starts a mock web server for testing", "Configures a subset of the application context", "Disables embedded servers for testing"],
        "explanation": "The @SpringBootTest annotation loads the full application context, including embedded servers, for integration testing."
    },
    {
        "question": "What is the purpose of the spring-boot-maven-plugin?",
        "correctAnswers": ["To build and package Spring Boot applications"],
        "incorrectAnswers": ["To manage application properties", "To enable auto-configuration features", "To manage runtime dependencies"],
        "explanation": "The spring-boot-maven-plugin helps package applications as executable JARs or WARs and simplifies their deployment."
    },
    {
        "question": "Which annotation is used to define a command-line runner in Spring Boot?",
        "correctAnswers": ["@SpringBootApplication"],
        "incorrectAnswers": ["@CommandRunner", "@RunApplication", "@ApplicationCommand"],
        "explanation": "The @SpringBootApplication annotation is a meta-annotation used to configure and run a Spring Boot application."
    },
    {
        "question": "Which file is used to customize default error messages in Spring Boot?",
        "correctAnswers": ["error.html"],
        "incorrectAnswers": ["default-error.html", "custom-error.html", "app-error.html"],
        "explanation": "Spring Boot searches for an 'error.html' file in the templates directory to render custom error pages."
    },
    {
        "question": "What does Spring Boot's 'spring.main.banner-mode' property configure?",
        "correctAnswers": ["The display of the startup banner"],
        "incorrectAnswers": ["The application startup mode", "The logging output level", "The inclusion of debug logs in the banner"],
        "explanation": "'spring.main.banner-mode' controls whether the startup banner is shown, logged, or disabled."
    },
    {
        "question": "Which annotation is used to define a filter in a Spring Boot application?",
        "correctAnswers": ["@WebFilter"],
        "incorrectAnswers": ["@FilterComponent", "@HttpFilter", "@ControllerFilter"],
        "explanation": "@WebFilter is used to declare a servlet filter in a Spring Boot application."
    },
    {
        "question": "Which tool is used to generate Spring Boot project skeletons?",
        "correctAnswers": ["Spring Initializr"],
        "incorrectAnswers": ["Spring Generator", "Spring Skeleton Creator", "Spring Boot CLI"],
        "explanation": "Spring Initializr is an online and command-line tool to bootstrap Spring Boot projects with minimal setup."
    },
    {
        "question": "Which annotation is used to validate method arguments in Spring Boot?",
        "correctAnswers": ["@Valid"],
        "incorrectAnswers": ["@Validate", "@ArgumentValidator", "@InputCheck"],
        "explanation": "The @Valid annotation is used with method arguments to trigger validation constraints on the input."
    },
    {
        "question": "Which property is used to configure the context path in a Spring Boot application?",
        "correctAnswers": ["server.servlet.context-path"],
        "incorrectAnswers": ["application.context.path", "server.context", "spring.context.path"],
        "explanation": "'server.servlet.context-path' specifies the base URL path for the application."
    },
    {
        "question": "Which annotation is used to map a class to a database table in Spring Boot?",
        "correctAnswers": ["@Entity"],
        "incorrectAnswers": ["@TableMapping", "@DatabaseObject", "@JPAEntity"],
        "explanation": "The @Entity annotation is used to map a Java class to a corresponding database table in JPA."
    },
    {
        "question": "Which annotation is used to exclude specific classes from Spring Boot's auto-configuration?",
        "correctAnswers": ["@EnableAutoConfiguration(exclude={...})"],
        "incorrectAnswers": ["@ExcludeAutoConfiguration", "@DisableConfiguration", "@NoAutoConfig"],
        "explanation": "@EnableAutoConfiguration(exclude={...}) allows excluding specific auto-configuration classes."
    },
    {
        "question": "Which annotation is used to define a Spring Boot test slice for JPA repositories?",
        "correctAnswers": ["@DataJpaTest"],
        "incorrectAnswers": ["@JpaRepositoryTest", "@RepositorySliceTest", "@JpaTest"],
        "explanation": "@DataJpaTest is used to test JPA repositories with a limited application context."
    },
    {
        "question": "What is the default HTTP port for a Spring Boot application?",
        "correctAnswers": ["8080"],
        "incorrectAnswers": ["8000", "8888", "9000"],
        "explanation": "By default, Spring Boot applications run on port 8080 unless configured otherwise."
    },
    {
        "question": "Which annotation is used to enable scheduling in a Spring Boot application?",
        "correctAnswers": ["@EnableScheduling"],
        "incorrectAnswers": ["@EnableTasks", "@EnableTimers", "@EnableCron"],
        "explanation": "@EnableScheduling is used to activate Spring's scheduled task execution capability."
    },
    {
        "question": "Which annotation is used to define a Spring Boot component for processing HTTP requests?",
        "correctAnswers": ["@Controller"],
        "incorrectAnswers": ["@HttpComponent", "@WebProcessor", "@Service"],
        "explanation": "@Controller is used to define a Spring MVC component that processes HTTP requests."
    },
    {
        "question": "Which annotation is used to inject dependencies in Spring Boot?",
        "correctAnswers": ["@Autowired"],
        "incorrectAnswers": ["@InjectBean", "@DependencyInject", "@Resource"],
        "explanation": "@Autowired is used to automatically wire beans into Spring components."
    },
    {
        "question": "Which annotation is used to define a method as a bean provider in Spring Boot?",
        "correctAnswers": ["@Bean"],
        "incorrectAnswers": ["@ConfigBean", "@Provider", "@CreateBean"],
        "explanation": "@Bean is used to define a method that returns a bean to be managed by the Spring container."
    },
    {
        "question": "What is the purpose of the Spring Boot @Profile annotation?",
        "correctAnswers": ["To specify the active profile for a bean or configuration"],
        "incorrectAnswers": ["To define logging levels", "To manage test configurations", "To specify application environments"],
        "explanation": "@Profile is used to activate beans or configurations based on the active environment profile."
    },
    {
        "question": "Which dependency is required for using Spring Boot Actuator?",
        "correctAnswers": ["spring-boot-starter-actuator"],
        "incorrectAnswers": ["spring-boot-starter-monitor", "spring-boot-starter-metrics", "spring-boot-starter-insight"],
        "explanation": "'spring-boot-starter-actuator' provides production-ready monitoring and management features."
    },
    {
        "question": "What is the purpose of the Spring Boot 'application.yml' file?",
        "correctAnswers": ["To configure application properties in YAML format"],
        "incorrectAnswers": ["To store JavaScript files", "To define application-specific logs", "To initialize database tables"],
        "explanation": "The 'application.yml' file is used to configure properties for a Spring Boot application in YAML format."
    },
    {
        "question": "Which annotation is used to declare a field as a request parameter in a Spring Boot controller?",
        "correctAnswers": ["@RequestParam"],
        "incorrectAnswers": ["@RequestField", "@Param", "@RequestVariable"],
        "explanation": "@RequestParam is used to bind HTTP request parameters to controller method arguments."
    },
    {
        "question": "What is the purpose of Spring Boot's CommandLineRunner interface?",
        "correctAnswers": ["To execute code after the application context is initialized"],
        "incorrectAnswers": ["To execute tasks before the application starts", "To configure the application context", "To schedule tasks for later execution"],
        "explanation": "CommandLineRunner is used to run specific code after the application context is initialized."
    },
    {
        "question": "Which annotation is used to enable asynchronous processing in a Spring Boot application?",
        "correctAnswers": ["@EnableAsync"],
        "incorrectAnswers": ["@EnableConcurrency", "@EnableThreads", "@EnableParallel"],
        "explanation": "@EnableAsync enables Spring's asynchronous method execution support."
    },
    {
        "question": "Which annotation is used to handle exceptions in a Spring Boot controller?",
        "correctAnswers": ["@ExceptionHandler"],
        "incorrectAnswers": ["@ErrorHandler", "@ControllerAdvice", "@ExceptionResolver"],
        "explanation": "@ExceptionHandler is used to define methods that handle exceptions thrown during request processing."
    },
    {
        "question": "What is the purpose of Spring Boot's @ConditionalOnProperty annotation?",
        "correctAnswers": ["To conditionally enable beans based on property values"],
        "incorrectAnswers": ["To define application properties", "To enable profiles based on properties", "To configure property defaults"],
        "explanation": "@ConditionalOnProperty is used to enable or disable beans based on specific property values."
    },
    {
        "question": "Which annotation is used to scan for Spring components in specific packages?",
        "correctAnswers": ["@ComponentScan"],
        "incorrectAnswers": ["@ScanPackages", "@EnableComponents", "@PackageScan"],
        "explanation": "@ComponentScan is used to specify base packages for scanning Spring components."
    },
    {
        "question": "Which annotation is used to define a custom health indicator in Spring Boot Actuator?",
        "correctAnswers": ["@HealthIndicator"],
        "incorrectAnswers": ["@ActuatorHealth", "@Indicator", "@CustomHealth"],
        "explanation": "@HealthIndicator is used to create custom health checks for Actuator endpoints."
    },
    {
        "question": "Which annotation is used to cache the result of a method in Spring Boot?",
        "correctAnswers": ["@Cacheable"],
        "incorrectAnswers": ["@CachedResult", "@EnableCache", "@MethodCache"],
        "explanation": "@Cacheable is used to indicate that the result of a method should be cached."
    },
    {
        "question": "Which annotation is used to declare an embedded web server configuration class?",
        "correctAnswers": ["@EmbeddedServletContainerCustomizer"],
        "incorrectAnswers": ["@ServerCustomizer", "@EmbeddedWebConfig", "@ServletConfig"],
        "explanation": "@EmbeddedServletContainerCustomizer is used to customize the embedded web server configuration."
    },
    {
        "question": "What is the purpose of the 'spring.jpa.show-sql' property?",
        "correctAnswers": ["To log SQL statements executed by JPA"],
        "incorrectAnswers": ["To display SQL errors", "To enable SQL injection prevention", "To configure database connections"],
        "explanation": "'spring.jpa.show-sql=true' logs SQL queries executed by JPA."
    },
    {
        "question": "Which annotation is used to mark a class as a REST client in Spring Boot?",
        "correctAnswers": ["@FeignClient"],
        "incorrectAnswers": ["@RestClient", "@ApiClient", "@WebClient"],
        "explanation": "@FeignClient is used to declare a REST client interface for external service communication."
    }
]
