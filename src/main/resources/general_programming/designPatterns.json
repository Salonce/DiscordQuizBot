[
	{
		"question": "Which design pattern provides a way to create objects without specifying the exact class of object to be created?",
		"correctAnswers": ["Factory Method"],
		"incorrectAnswers": ["Adapter Pattern", "Observer Pattern", "Singleton Pattern"],
		"explanation": "The Factory Method pattern defines an interface for creating objects but allows subclasses to alter the type of objects that will be created."
	},
	{
		"question": "Which design pattern ensures a class has only one instance and provides a global point of access to it?",
		"correctAnswers": ["Singleton Pattern"],
		"incorrectAnswers": ["Builder Pattern", "Prototype Pattern", "Composite Pattern"],
		"explanation": "The Singleton Pattern restricts the instantiation of a class to one single instance and provides a global access point for it."
	},
	{
		"question": "Which design pattern is used to compose objects into tree structures to represent part-whole hierarchies?",
		"correctAnswers": ["Composite Pattern"],
		"incorrectAnswers": ["Decorator Pattern", "Bridge Pattern", "Strategy Pattern"],
		"explanation": "The Composite Pattern allows you to build complex object trees that can be treated uniformly as a single object."
	},
	{
		"question": "Which design pattern is used to encapsulate a request as an object, allowing parameterization of clients with different requests?",
		"correctAnswers": ["Command Pattern"],
		"incorrectAnswers": ["Template Method Pattern", "Flyweight Pattern", "Visitor Pattern"],
		"explanation": "The Command Pattern encapsulates requests as objects, enabling support for undoable operations and deferred execution."
	},
	{
		"question": "Which design pattern defines a family of algorithms and allows the client to choose which algorithm to use?",
		"correctAnswers": ["Strategy Pattern"],
		"incorrectAnswers": ["Observer Pattern", "Chain of Responsibility Pattern", "State Pattern"],
		"explanation": "The Strategy Pattern enables selecting an algorithm's behavior at runtime by defining a family of algorithms."
	},
	{
		"question": "Which design pattern provides a surrogate or placeholder for another object to control access to it?",
		"correctAnswers": ["Proxy Pattern"],
		"incorrectAnswers": ["Adapter Pattern", "Bridge Pattern", "Decorator Pattern"],
		"explanation": "The Proxy Pattern provides a surrogate for another object to control and manage access to it."
	},
	{
		"question": "Which design pattern defines the skeleton of an algorithm, deferring some steps to subclasses?",
		"correctAnswers": ["Template Method Pattern"],
		"incorrectAnswers": ["Strategy Pattern", "Iterator Pattern", "Builder Pattern"],
		"explanation": "The Template Method Pattern allows subclasses to redefine certain steps of an algorithm without changing its structure."
	},
	{
		"question": "Which design pattern allows an object to change its behavior when its internal state changes?",
		"correctAnswers": ["State Pattern"],
		"incorrectAnswers": ["Command Pattern", "Flyweight Pattern", "Composite Pattern"],
		"explanation": "The State Pattern enables an object to alter its behavior when its state changes, appearing to change its class."
	},
	{
		"question": "Which design pattern provides a way to traverse elements of a collection without exposing its underlying structure?",
		"correctAnswers": ["Iterator Pattern"],
		"incorrectAnswers": ["Observer Pattern", "Command Pattern", "Facade Pattern"],
		"explanation": "The Iterator Pattern provides a way to sequentially access the elements of a collection without exposing its underlying representation."
	},
	{
		"question": "Which design pattern separates the construction of a complex object from its representation?",
		"correctAnswers": ["Builder Pattern"],
		"incorrectAnswers": ["Factory Method", "Prototype Pattern", "Singleton Pattern"],
		"explanation": "The Builder Pattern allows you to construct complex objects step by step, separating the construction process from its representation."
	},
	{
		"question": "Which design pattern allows the addition of new functionality to an object dynamically?",
		"correctAnswers": ["Decorator Pattern"],
		"incorrectAnswers": ["Proxy Pattern", "Adapter Pattern", "Bridge Pattern"],
		"explanation": "The Decorator Pattern attaches additional responsibilities to an object dynamically, offering a flexible alternative to subclassing."
	},
	{
		"question": "Which design pattern converts an interface of a class into another interface clients expect?",
		"correctAnswers": ["Adapter Pattern"],
		"incorrectAnswers": ["Proxy Pattern", "Bridge Pattern", "Composite Pattern"],
		"explanation": "The Adapter Pattern allows classes with incompatible interfaces to work together by converting one interface into another."
	},
	{
		"question": "Which design pattern provides an interface to a set of interfaces in a subsystem?",
		"correctAnswers": ["Facade Pattern"],
		"incorrectAnswers": ["Mediator Pattern", "Adapter Pattern", "Proxy Pattern"],
		"explanation": "The Facade Pattern provides a unified interface to a set of interfaces, making the subsystem easier to use."
	},
	{
		"question": "Which design pattern lets subclasses decide which class to instantiate?",
		"correctAnswers": ["Factory Method"],
		"incorrectAnswers": ["Builder Pattern", "Template Method Pattern", "Command Pattern"],
		"explanation": "The Factory Method Pattern lets a class defer instantiation to subclasses, allowing more flexibility."
	},
	{
		"question": "Which design pattern ensures that related or dependent objects are created together?",
		"correctAnswers": ["Abstract Factory"],
		"incorrectAnswers": ["Factory Method", "Builder Pattern", "Prototype Pattern"],
		"explanation": "The Abstract Factory Pattern provides an interface for creating families of related objects without specifying their concrete classes."
	},
	{
		"question": "Which design pattern shares common data to minimize memory usage for a large number of similar objects?",
		"correctAnswers": ["Flyweight Pattern"],
		"incorrectAnswers": ["State Pattern", "Decorator Pattern", "Prototype Pattern"],
		"explanation": "The Flyweight Pattern reduces memory usage by sharing data for a large number of objects with similar properties."
	},
	{
		"question": "Which design pattern defines dependencies between objects so that when one changes, all its dependents are notified?",
		"correctAnswers": ["Observer Pattern"],
		"incorrectAnswers": ["Mediator Pattern", "Composite Pattern", "Bridge Pattern"],
		"explanation": "The Observer Pattern establishes a one-to-many dependency, so when one object changes state, all its dependents are notified and updated."
	},
	{
		"question": "Which design pattern simplifies communication between multiple objects by introducing a mediator object?",
		"correctAnswers": ["Mediator Pattern"],
		"incorrectAnswers": ["Observer Pattern", "Command Pattern", "Strategy Pattern"],
		"explanation": "The Mediator Pattern encapsulates how a set of objects interact, promoting loose coupling by preventing direct interaction between objects."
	},
	{
		"question": "Which design pattern is used to create a clone of an existing object?",
		"correctAnswers": ["Prototype Pattern"],
		"incorrectAnswers": ["Abstract Factory", "Builder Pattern", "Factory Method"],
		"explanation": "The Prototype Pattern is used to create a copy of an existing object while maintaining performance and reducing complexity."
	},
	{
		"question": "Which design pattern allows an object to pass along a request to a chain of potential handlers?",
		"correctAnswers": ["Chain of Responsibility"],
		"incorrectAnswers": ["Command Pattern", "Observer Pattern", "State Pattern"],
		"explanation": "The Chain of Responsibility Pattern passes a request along a chain of handlers, allowing each handler to either process or pass it further."
	},
    {
        "question": "Which design pattern provides a centralized point of communication between different components in a system?",
        "correctAnswers": ["Mediator Pattern"],
        "incorrectAnswers": ["Observer Pattern", "Singleton Pattern", "Adapter Pattern"],
        "explanation": "The Mediator Pattern centralizes communication between components to promote loose coupling."
    },
    {
        "question": "Which design pattern is used to allow objects to act as substitutes for real objects?",
        "correctAnswers": ["Proxy Pattern"],
        "incorrectAnswers": ["Decorator Pattern", "Adapter Pattern", "Builder Pattern"],
        "explanation": "The Proxy Pattern provides a surrogate or placeholder object to control access to the original object."
    },
    {
        "question": "Which design pattern groups related behaviors into a single class so they can be shared among multiple classes?",
        "correctAnswers": ["Flyweight Pattern"],
        "incorrectAnswers": ["Strategy Pattern", "Composite Pattern", "State Pattern"],
        "explanation": "The Flyweight Pattern reduces memory usage by reusing shared objects."
    },
    {
        "question": "Which design pattern allows an object to alter its behavior based on its internal state?",
        "correctAnswers": ["State Pattern"],
        "incorrectAnswers": ["Observer Pattern", "Strategy Pattern", "Factory Method"],
        "explanation": "The State Pattern allows an object to change its behavior when its state changes."
    },
    {
        "question": "Which design pattern involves creating a chain of handlers to process requests?",
        "correctAnswers": ["Chain of Responsibility Pattern"],
        "incorrectAnswers": ["Command Pattern", "Observer Pattern", "State Pattern"],
        "explanation": "The Chain of Responsibility Pattern passes a request along a chain of handlers until one handles it."
    },
    {
        "question": "Which design pattern allows algorithms to vary independently of the clients that use them?",
        "correctAnswers": ["Strategy Pattern"],
        "incorrectAnswers": ["State Pattern", "Command Pattern", "Builder Pattern"],
        "explanation": "The Strategy Pattern enables the selection of algorithms at runtime."
    },
    {
        "question": "Which design pattern combines multiple objects into a single object to represent a tree structure?",
        "correctAnswers": ["Composite Pattern"],
        "incorrectAnswers": ["Decorator Pattern", "Bridge Pattern", "Prototype Pattern"],
        "explanation": "The Composite Pattern treats individual objects and compositions of objects uniformly."
    },
    {
        "question": "Which design pattern creates a simplified interface for a complex system?",
        "correctAnswers": ["Facade Pattern"],
        "incorrectAnswers": ["Adapter Pattern", "Proxy Pattern", "Bridge Pattern"],
        "explanation": "The Facade Pattern provides a single unified interface to a subsystem, hiding its complexity."
    },
    {
        "question": "Which design pattern uses a prototype instance to create new objects by copying it?",
        "correctAnswers": ["Prototype Pattern"],
        "incorrectAnswers": ["Factory Method", "Builder Pattern", "Singleton Pattern"],
        "explanation": "The Prototype Pattern creates new objects by copying an existing object instance."
    },
    {
        "question": "Which design pattern defines an object that encapsulates how a set of objects interact?",
        "correctAnswers": ["Mediator Pattern"],
        "incorrectAnswers": ["Observer Pattern", "Singleton Pattern", "Adapter Pattern"],
        "explanation": "The Mediator Pattern centralizes communication and avoids direct interaction between objects."
    },
    {
        "question": "Which design pattern is used to provide a consistent interface to different classes with incompatible interfaces?",
        "correctAnswers": ["Adapter Pattern"],
        "incorrectAnswers": ["Facade Pattern", "Proxy Pattern", "Bridge Pattern"],
        "explanation": "The Adapter Pattern converts an interface of a class into another interface clients expect."
    },
    {
        "question": "Which design pattern is used to decouple abstraction from implementation, allowing the two to vary independently?",
        "correctAnswers": ["Bridge Pattern"],
        "incorrectAnswers": ["Adapter Pattern", "Facade Pattern", "Decorator Pattern"],
        "explanation": "The Bridge Pattern decouples abstraction from implementation, making them independently extensible."
    },
    {
        "question": "Which design pattern ensures that a class has only one instance and provides a global point of access to it?",
        "correctAnswers": ["Singleton Pattern"],
        "incorrectAnswers": ["Factory Method Pattern", "Abstract Factory Pattern", "Prototype Pattern"],
        "explanation": "The Singleton Pattern restricts instantiation of a class to one single instance."
    },
    {
        "question": "Which design pattern dynamically changes an object's behavior by wrapping it with additional functionality?",
        "correctAnswers": ["Decorator Pattern"],
        "incorrectAnswers": ["Composite Pattern", "Proxy Pattern", "Bridge Pattern"],
        "explanation": "The Decorator Pattern dynamically adds behavior to objects by wrapping them in decorator objects."
    },
    {
        "question": "Which design pattern allows you to traverse a collection of objects without exposing its underlying structure?",
        "correctAnswers": ["Iterator Pattern"],
        "incorrectAnswers": ["Visitor Pattern", "Composite Pattern", "Command Pattern"],
        "explanation": "The Iterator Pattern provides a way to traverse a collection's elements without exposing its internal structure."
    },
    {
        "question": "Which design pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified?",
        "correctAnswers": ["Observer Pattern"],
        "incorrectAnswers": ["Mediator Pattern", "Command Pattern", "Strategy Pattern"],
        "explanation": "The Observer Pattern establishes a mechanism for one object to notify others of changes."
    },
    {
        "question": "Which design pattern provides a way to separate the construction of a complex object from its representation?",
        "correctAnswers": ["Builder Pattern"],
        "incorrectAnswers": ["Abstract Factory Pattern", "Factory Method Pattern", "Prototype Pattern"],
        "explanation": "The Builder Pattern separates object construction from representation, allowing for step-by-step creation."
    },
    {
        "question": "Which design pattern provides a family of related objects without specifying their concrete classes?",
        "correctAnswers": ["Abstract Factory Pattern"],
        "incorrectAnswers": ["Factory Method Pattern", "Builder Pattern", "Prototype Pattern"],
        "explanation": "The Abstract Factory Pattern provides an interface for creating families of related objects without specifying their concrete types."
    },
    {
        "question": "Which design pattern encapsulates a command as an object, allowing you to parameterize methods with different commands?",
        "correctAnswers": ["Command Pattern"],
        "incorrectAnswers": ["Observer Pattern", "Iterator Pattern", "Composite Pattern"],
        "explanation": "The Command Pattern encapsulates commands as objects, enabling decoupled execution."
    },
    {
        "question": "Which design pattern lets a visitor class define operations to be performed on elements of an object structure?",
        "correctAnswers": ["Visitor Pattern"],
        "incorrectAnswers": ["Observer Pattern", "Iterator Pattern", "Composite Pattern"],
        "explanation": "The Visitor Pattern lets a visitor define operations to be performed on a collection of objects without changing their classes."
    },
    {
        "question": "Which design pattern simplifies interactions between multiple objects by introducing a single coordinating object?",
        "correctAnswers": ["Mediator Pattern"],
        "incorrectAnswers": ["Observer Pattern", "Proxy Pattern", "Builder Pattern"],
        "explanation": "The Mediator Pattern reduces complexity by centralizing interactions between objects through a mediator."
    },
    {
        "question": "Which design pattern allows you to switch between different strategies at runtime?",
        "correctAnswers": ["Strategy Pattern"],
        "incorrectAnswers": ["State Pattern", "Command Pattern", "Iterator Pattern"],
        "explanation": "The Strategy Pattern allows the client to dynamically switch between different algorithms or strategies."
    },
    {
        "question": "Which design pattern is used to provide an interface for creating related or dependent objects without specifying their concrete classes?",
        "correctAnswers": ["Abstract Factory Pattern"],
        "incorrectAnswers": ["Factory Method Pattern", "Prototype Pattern", "Builder Pattern"],
        "explanation": "The Abstract Factory Pattern creates families of related objects without specifying their concrete implementations."
    },
    {
        "question": "Which design pattern is most suitable for adding new operations to a collection of objects without changing their classes?",
        "correctAnswers": ["Visitor Pattern"],
        "incorrectAnswers": ["Composite Pattern", "Bridge Pattern", "Observer Pattern"],
        "explanation": "The Visitor Pattern allows adding new functionality to a collection of objects without modifying their structures."
    },
    {
        "question": "Which design pattern allows for defining a family of algorithms that can be swapped dynamically?",
        "correctAnswers": ["Strategy Pattern"],
        "incorrectAnswers": ["State Pattern", "Template Method Pattern", "Command Pattern"],
        "explanation": "The Strategy Pattern lets you define multiple algorithms and choose which one to execute at runtime."
    },
    {
        "question": "Which design pattern combines multiple objects into a single object to allow uniform treatment of individual and composite objects?",
        "correctAnswers": ["Composite Pattern"],
        "incorrectAnswers": ["Decorator Pattern", "Adapter Pattern", "Visitor Pattern"],
        "explanation": "The Composite Pattern is used to build part-whole hierarchies, enabling objects to be treated uniformly."
    },
    {
        "question": "Which design pattern delegates object creation to subclasses to determine the specific type of object to create?",
        "correctAnswers": ["Factory Method Pattern"],
        "incorrectAnswers": ["Builder Pattern", "Prototype Pattern", "Abstract Factory Pattern"],
        "explanation": "The Factory Method Pattern delegates the creation of objects to subclasses, allowing more flexibility."
    },
    {
        "question": "Which design pattern allows access to the elements of a collection without exposing its underlying structure?",
        "correctAnswers": ["Iterator Pattern"],
        "incorrectAnswers": ["Visitor Pattern", "Strategy Pattern", "Mediator Pattern"],
        "explanation": "The Iterator Pattern provides a way to sequentially access elements of a collection without exposing its internals."
    },
    {
        "question": "Which design pattern allows for the creation of an object without exposing the instantiation logic to the client?",
        "correctAnswers": ["Factory Method Pattern"],
        "incorrectAnswers": ["Abstract Factory Pattern", "Prototype Pattern", "Builder Pattern"],
        "explanation": "The Factory Method Pattern encapsulates the creation logic, enabling clients to create objects without knowing their exact types."
    },
    {
        "question": "Which design pattern provides a way to attach additional responsibilities to an object dynamically?",
        "correctAnswers": ["Decorator Pattern"],
        "incorrectAnswers": ["Proxy Pattern", "Adapter Pattern", "Composite Pattern"],
        "explanation": "The Decorator Pattern allows behavior to be added to an individual object dynamically, without affecting the behavior of other objects."
    },
    {
        "question": "Which design pattern shares intrinsic state across multiple objects to reduce memory usage?",
        "correctAnswers": ["Flyweight Pattern"],
        "incorrectAnswers": ["Singleton Pattern", "State Pattern", "Prototype Pattern"],
        "explanation": "The Flyweight Pattern minimizes memory usage by sharing data between multiple similar objects."
    },
    {
        "question": "Which design pattern uses an object to encapsulate all the details of a request and provides methods to execute it?",
        "correctAnswers": ["Command Pattern"],
        "incorrectAnswers": ["Chain of Responsibility Pattern", "Observer Pattern", "State Pattern"],
        "explanation": "The Command Pattern encapsulates a request as an object, decoupling the sender from the receiver."
    },
    {
        "question": "Which design pattern ensures that only one instance of a class is created and provides a global access point to it?",
        "correctAnswers": ["Singleton Pattern"],
        "incorrectAnswers": ["Factory Method Pattern", "Abstract Factory Pattern", "Prototype Pattern"],
        "explanation": "The Singleton Pattern ensures that a class has only one instance and provides a global point of access to it."
    },
    {
        "question": "Which design pattern uses a tree structure to represent part-whole relationships between objects?",
        "correctAnswers": ["Composite Pattern"],
        "incorrectAnswers": ["Decorator Pattern", "Visitor Pattern", "Proxy Pattern"],
        "explanation": "The Composite Pattern organizes objects into tree structures to represent hierarchies, allowing for uniform treatment."
    },
    {
        "question": "Which design pattern lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure?",
        "correctAnswers": ["Template Method Pattern"],
        "incorrectAnswers": ["Strategy Pattern", "Command Pattern", "Visitor Pattern"],
        "explanation": "The Template Method Pattern defines an algorithm's structure while allowing subclasses to redefine specific steps."
    },
    {
        "question": "Which design pattern provides a unified interface to a set of interfaces in a subsystem?",
        "correctAnswers": ["Facade Pattern"],
        "incorrectAnswers": ["Adapter Pattern", "Bridge Pattern", "Composite Pattern"],
        "explanation": "The Facade Pattern simplifies the use of a subsystem by providing a unified interface to its complex structure."
    },
    {
        "question": "Which design pattern allows one object to notify other objects about changes in its state?",
        "correctAnswers": ["Observer Pattern"],
        "incorrectAnswers": ["Mediator Pattern", "Command Pattern", "Chain of Responsibility Pattern"],
        "explanation": "The Observer Pattern establishes a one-to-many relationship between objects so that when one object changes state, all dependents are notified."
    },
    {
        "question": "Which design pattern allows algorithms to be selected at runtime by defining a family of algorithms?",
        "correctAnswers": ["Strategy Pattern"],
        "incorrectAnswers": ["State Pattern", "Visitor Pattern", "Mediator Pattern"],
        "explanation": "The Strategy Pattern lets the client choose which algorithm to use at runtime from a family of interchangeable algorithms."
    },
    {
        "question": "Which design pattern is used to encapsulate varying parts of an algorithm to create flexibility in its implementation?",
        "correctAnswers": ["Template Method Pattern"],
        "incorrectAnswers": ["Builder Pattern", "Command Pattern", "Strategy Pattern"],
        "explanation": "The Template Method Pattern encapsulates invariant parts of an algorithm while allowing customization through subclassing."
    },
    {
        "question": "Which design pattern defines an object that contains data and behavior for multiple objects, reducing memory usage?",
        "correctAnswers": ["Flyweight Pattern"],
        "incorrectAnswers": ["Composite Pattern", "Prototype Pattern", "Factory Method Pattern"],
        "explanation": "The Flyweight Pattern minimizes memory usage by sharing data between similar objects and centralizing common state."
    },
    {
        "question": "Which design pattern decouples an abstraction from its implementation, allowing the two to vary independently?",
        "correctAnswers": ["Bridge Pattern"],
        "incorrectAnswers": ["Adapter Pattern", "Proxy Pattern", "Composite Pattern"],
        "explanation": "The Bridge Pattern separates abstraction and implementation, enabling them to be developed independently."
    },
    {
        "question": "Which design pattern centralizes logic for notifying multiple observers of a subject's state changes?",
        "correctAnswers": ["Observer Pattern"],
        "incorrectAnswers": ["Mediator Pattern", "Visitor Pattern", "Command Pattern"],
        "explanation": "The Observer Pattern establishes a one-to-many dependency between objects, ensuring that observers are notified of state changes."
    },
    {
        "question": "Which design pattern allows you to sequentially access elements of an aggregate object without exposing its internal representation?",
        "correctAnswers": ["Iterator Pattern"],
        "incorrectAnswers": ["Command Pattern", "Strategy Pattern", "State Pattern"],
        "explanation": "The Iterator Pattern provides a way to access elements of a collection sequentially without exposing its internal details."
    },
    {
        "question": "Which design pattern separates the construction of a complex object from its representation, allowing different representations?",
        "correctAnswers": ["Builder Pattern"],
        "incorrectAnswers": ["Abstract Factory Pattern", "Prototype Pattern", "Factory Method Pattern"],
        "explanation": "The Builder Pattern constructs a complex object step by step, separating the construction process from its final representation."
    },
    {
        "question": "Which design pattern ensures a single point of access to a single instance of a class?",
        "correctAnswers": ["Singleton Pattern"],
        "incorrectAnswers": ["Factory Method Pattern", "Bridge Pattern", "Flyweight Pattern"],
        "explanation": "The Singleton Pattern restricts the instantiation of a class to one instance and provides a single point of access to it."
    },
    {
        "question": "Which design pattern dynamically adds new functionality to an object without altering its structure?",
        "correctAnswers": ["Decorator Pattern"],
        "incorrectAnswers": ["Adapter Pattern", "Proxy Pattern", "Composite Pattern"],
        "explanation": "The Decorator Pattern allows you to dynamically add new behaviors to an object while keeping the original object's structure intact."
    },
    {
        "question": "Which design pattern reduces memory consumption by reusing shared data among objects with similar properties?",
        "correctAnswers": ["Flyweight Pattern"],
        "incorrectAnswers": ["State Pattern", "Composite Pattern", "Prototype Pattern"],
        "explanation": "The Flyweight Pattern reduces memory usage by sharing intrinsic data between multiple objects."
    },
    {
        "question": "Which design pattern provides an interface for creating families of related objects without specifying their concrete classes?",
        "correctAnswers": ["Abstract Factory Pattern"],
        "incorrectAnswers": ["Factory Method Pattern", "Builder Pattern", "Prototype Pattern"],
        "explanation": "The Abstract Factory Pattern provides an interface to create families of related or dependent objects without specifying their concrete implementations."
    },
    {
        "question": "Which design pattern encapsulates a request as an object, allowing parameterization and queuing of requests?",
        "correctAnswers": ["Command Pattern"],
        "incorrectAnswers": ["Chain of Responsibility Pattern", "Observer Pattern", "State Pattern"],
        "explanation": "The Command Pattern encapsulates requests as objects, enabling logging, queuing, and undoable operations."
    },
    {
        "question": "Which design pattern allows an object to change its behavior when its state changes?",
        "correctAnswers": ["State Pattern"],
        "incorrectAnswers": ["Strategy Pattern", "Template Method Pattern", "Command Pattern"],
        "explanation": "The State Pattern changes an object's behavior dynamically as its state changes, appearing as if the object has changed its class."
    },
    {
        "question": "Which design pattern provides a unified interface to a set of interfaces in a subsystem?",
        "correctAnswers": ["Facade Pattern"],
        "incorrectAnswers": ["Adapter Pattern", "Bridge Pattern", "Proxy Pattern"],
        "explanation": "The Facade Pattern simplifies a complex subsystem by providing a single unified interface to interact with it."
    },
    {
        "question": "Which design pattern converts one interface to another that a client expects?",
        "correctAnswers": ["Adapter Pattern"],
        "incorrectAnswers": ["Proxy Pattern", "Decorator Pattern", "Bridge Pattern"],
        "explanation": "The Adapter Pattern enables incompatible interfaces to work together by converting one interface to another."
    },
    {
        "question": "Which design pattern defines a skeleton of an algorithm, allowing subclasses to override certain steps?",
        "correctAnswers": ["Template Method Pattern"],
        "incorrectAnswers": ["Builder Pattern", "Strategy Pattern", "Command Pattern"],
        "explanation": "The Template Method Pattern provides the structure of an algorithm while allowing subclasses to customize specific steps."
    },
    {
        "question": "Which design pattern represents a tree structure to treat individual and composite objects uniformly?",
        "correctAnswers": ["Composite Pattern"],
        "incorrectAnswers": ["Decorator Pattern", "Adapter Pattern", "Visitor Pattern"],
        "explanation": "The Composite Pattern organizes objects into tree structures, enabling uniform treatment of both single objects and groups of objects."
    },
    {
        "question": "Which design pattern allows an operation to be defined on elements of an object structure without changing their classes?",
        "correctAnswers": ["Visitor Pattern"],
        "incorrectAnswers": ["Composite Pattern", "Decorator Pattern", "Observer Pattern"],
        "explanation": "The Visitor Pattern enables you to define new operations on a collection of objects without modifying their classes."
    },
    {
        "question": "Which design pattern passes requests along a chain of handlers, allowing each handler to either process or pass it?",
        "correctAnswers": ["Chain of Responsibility Pattern"],
        "incorrectAnswers": ["Command Pattern", "Strategy Pattern", "State Pattern"],
        "explanation": "The Chain of Responsibility Pattern passes requests through a chain of potential handlers, enabling flexible processing."
    },
    {
        "question": "Which design pattern allows objects to be cloned to avoid the cost of creating them from scratch?",
        "correctAnswers": ["Prototype Pattern"],
        "incorrectAnswers": ["Abstract Factory Pattern", "Builder Pattern", "Factory Method Pattern"],
        "explanation": "The Prototype Pattern creates new objects by cloning existing ones, reducing the cost of creating objects from scratch."
    },
    {
        "question": "Which design pattern provides a placeholder or surrogate to control access to another object?",
        "correctAnswers": ["Proxy Pattern"],
        "incorrectAnswers": ["Decorator Pattern", "Adapter Pattern", "Bridge Pattern"],
        "explanation": "The Proxy Pattern provides a placeholder for another object to control or manage access to it."
    },
    {
        "question": "Which design pattern allows an object to notify a group of objects about changes in its state?",
        "correctAnswers": ["Observer Pattern"],
        "incorrectAnswers": ["Mediator Pattern", "Command Pattern", "Strategy Pattern"],
        "explanation": "The Observer Pattern establishes a one-to-many dependency so that when one object changes, its dependents are notified."
    },
    {
        "question": "Which design pattern centralizes communication between objects, promoting loose coupling?",
        "correctAnswers": ["Mediator Pattern"],
        "incorrectAnswers": ["Observer Pattern", "Facade Pattern", "Bridge Pattern"],
        "explanation": "The Mediator Pattern centralizes interaction logic, preventing direct communication between objects and reducing coupling."
    }
]
