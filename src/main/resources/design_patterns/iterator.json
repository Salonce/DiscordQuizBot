[
    {
        "question": "What is the primary purpose of the Iterator design pattern?",
        "correctAnswers": ["To traverse elements of a collection without exposing its structure"],
        "incorrectAnswers": ["To sort a collection of elements efficiently", "To enforce a strict sequence in execution", "To manage concurrent access to a collection"],
        "explanation": "The Iterator design pattern provides a way to access elements of a collection sequentially without exposing its underlying representation."
    },
    {
        "question": "What does the Iterator interface typically define?",
        "correctAnswers": ["Methods to access and traverse elements"],
        "incorrectAnswers": ["Methods to add and remove elements dynamically", "Methods for sorting elements", "Methods to clone the entire collection"],
        "explanation": "The Iterator interface defines methods like 'next()' and 'hasNext()' to access and traverse collection elements."
    },
    {
        "question": "Which method in an iterator checks if there are more elements to traverse?",
        "correctAnswers": ["hasNext"],
        "incorrectAnswers": ["nextElement", "isAvailable", "checkNext"],
        "explanation": "'hasNext()' checks if the iterator has more elements left to traverse in the collection."
    },
    {
        "question": "Which method is responsible for returning the next element in the collection?",
        "correctAnswers": ["next"],
        "incorrectAnswers": ["getNextElement", "fetchNext", "retrieveNext"],
        "explanation": "The 'next()' method retrieves the next element in the iteration."
    },
    {
        "question": "What type of pattern is the Iterator design pattern?",
        "correctAnswers": ["Behavioral"],
        "incorrectAnswers": ["Structural", "Creational", "Architectural"],
        "explanation": "The Iterator pattern is a behavioral design pattern as it defines the way objects interact during runtime."
    },
    {
        "question": "Which collection class does NOT typically require an iterator?",
        "correctAnswers": ["Single-element collection"],
        "incorrectAnswers": ["Array-based collection", "Linked-list collection", "Tree-based collection"],
        "explanation": "A single-element collection doesnâ€™t need an iterator because it contains only one element."
    },
    {
        "question": "What benefit does using an Iterator provide?",
        "correctAnswers": ["It abstracts the traversal logic"],
        "incorrectAnswers": ["It prevents thread safety issues", "It guarantees constant time access", "It eliminates the need for collections"],
        "explanation": "Iterators abstract traversal logic, allowing you to work with collections without knowing their internal details."
    },
    {
        "question": "What is the key difference between an external and internal iterator?",
        "correctAnswers": ["Control over iteration is given to the client in an external iterator"],
        "incorrectAnswers": ["Internal iterators are used for recursive collections only", "External iterators do not allow sequential traversal", "Internal iterators provide explicit control to the client"],
        "explanation": "In an external iterator, the client controls the iteration, whereas in an internal iterator, the collection handles the iteration."
    },
    {
        "question": "Which of these is a disadvantage of using the Iterator pattern?",
        "correctAnswers": ["May increase memory usage for complex collections"],
        "incorrectAnswers": ["It cannot traverse linked lists", "It reduces code readability significantly", "It does not support polymorphism"],
        "explanation": "Using iterators with complex collections can increase memory usage due to additional objects or state tracking."
    },
    {
        "question": "What is the role of the 'ConcreteIterator' in the Iterator design pattern?",
        "correctAnswers": ["Implements traversal for a specific collection"],
        "incorrectAnswers": ["Defines traversal operations", "Handles thread synchronization", "Optimizes collection storage"],
        "explanation": "The ConcreteIterator provides the actual implementation for traversing a specific collection."
    },
    {
        "question": "Which of these is NOT a common method in an Iterator interface?",
        "correctAnswers": ["add"],
        "incorrectAnswers": ["hasNext", "next", "remove"],
        "explanation": "The 'add' method is not part of a typical iterator interface as it focuses on traversal, not modification."
    },
    {
        "question": "Which design principle does the Iterator pattern adhere to?",
        "correctAnswers": ["Encapsulate what varies"],
        "incorrectAnswers": ["Favor inheritance over composition", "Program to concrete implementations", "Depend on specific classes"],
        "explanation": "The Iterator pattern encapsulates the varying traversal logic, keeping it separate from the collection implementation."
    },
    {
        "question": "What is the primary function of the 'remove' method in an iterator?",
        "correctAnswers": ["Deletes the current element during iteration"],
        "incorrectAnswers": ["Clears the entire collection", "Removes duplicates from the collection", "Deletes elements from the end"],
        "explanation": "'remove()' deletes the element that was returned by the last 'next()' call."
    },
    {
        "question": "What type of iteration does a bidirectional iterator support?",
        "correctAnswers": ["Forward and backward traversal"],
        "incorrectAnswers": ["Only forward traversal", "Only random access", "Only hierarchical traversal"],
        "explanation": "A bidirectional iterator allows movement both forward and backward through a collection."
    },
    {
        "question": "In Java, which class commonly provides an iterator?",
        "correctAnswers": ["ArrayList"],
        "incorrectAnswers": ["HashSetManager", "LinkedQueueAdapter", "BinaryHeap"],
        "explanation": "The 'ArrayList' class in Java provides an iterator for sequential access to its elements."
    },
    {
        "question": "Which principle is violated if a collection exposes its internal structure directly?",
        "correctAnswers": ["Encapsulation"],
        "incorrectAnswers": ["Inheritance", "Polymorphism", "Modularity"],
        "explanation": "Encapsulation is violated when a collection exposes its internal structure, which the Iterator pattern avoids."
    },
    {
        "question": "What is a characteristic of a robust iterator?",
        "correctAnswers": ["Handles concurrent modifications gracefully"],
        "incorrectAnswers": ["Iterates only once through a collection", "Optimizes memory by storing all elements", "Locks the collection during iteration"],
        "explanation": "A robust iterator ensures iteration continues or fails gracefully if the collection is modified concurrently."
    },
    {
        "question": "What is a common alternative to the Iterator design pattern?",
        "correctAnswers": ["For-each loop"],
        "incorrectAnswers": ["Manual indexing", "Factory pattern", "Decorator pattern"],
        "explanation": "A for-each loop provides a simplified way to traverse collections without directly using an iterator."
    },
    {
        "question": "What role does the 'Client' play in the Iterator design pattern?",
        "correctAnswers": ["Uses the iterator to access elements"],
        "incorrectAnswers": ["Implements the collection interface", "Defines traversal methods", "Maintains the state of iteration"],
        "explanation": "The Client interacts with the Iterator to access and manipulate elements in the collection."
    },
    {
        "question": "How does the Iterator pattern simplify client code?",
        "correctAnswers": ["By abstracting the traversal logic"],
        "incorrectAnswers": ["By optimizing the collection's internal data structure", "By enforcing strict data ordering", "By preventing collection modifications"],
        "explanation": "The Iterator pattern hides the details of how elements are traversed, simplifying client interaction."
    }
]
