[
    {
      "question": "What is the primary purpose of the Template Design Pattern?",
      "correctAnswers": ["To define the structure of an algorithm, allowing subclasses to implement specific steps"],
      "incorrectAnswers": ["To provide a generic method that all classes must implement", "To define behavior using only concrete classes", "To enforce the use of inheritance over composition"],
      "explanation": "The Template Design Pattern allows defining the skeleton of an algorithm in a method, deferring some steps to subclasses."
    },
    {
      "question": "Which of the following is a key characteristic of the Template Design Pattern?",
      "correctAnswers": ["The algorithm's structure is fixed, but specific steps can be overridden by subclasses"],
      "incorrectAnswers": ["The algorithm is completely abstract and cannot be extended", "All steps of the algorithm are implemented in the base class", "The algorithm must be implemented in the subclass and never in the base class"],
      "explanation": "In the Template Design Pattern, the general structure of the algorithm is defined in the superclass, and subclasses can override specific steps."
    },
    {
      "question": "Which of the following is an example of a method used in the Template Design Pattern?",
      "correctAnswers": ["Abstract method"],
      "incorrectAnswers": ["Final method", "Private method", "Static method"],
      "explanation": "In the Template Design Pattern, abstract methods are used to define steps of the algorithm that can be overridden by subclasses."
    },
    {
      "question": "In the Template Design Pattern, what role does the base class play?",
      "correctAnswers": ["It defines the template for the algorithm and some default behavior"],
      "incorrectAnswers": ["It contains all the business logic", "It provides a specific implementation for every step of the algorithm", "It has no methods and serves only as an interface"],
      "explanation": "The base class provides the overall structure and default implementations, allowing subclasses to customize specific steps."
    },
    {
      "question": "What would be a suitable use case for the Template Design Pattern?",
      "correctAnswers": ["When you have a series of steps with some common behavior that needs to be reused by different subclasses"],
      "incorrectAnswers": ["When every step in the algorithm is different for each class", "When you need to store large amounts of data in a class", "When the class hierarchy is not yet defined"],
      "explanation": "The Template Design Pattern is ideal when several classes share common behavior but have different implementations for some steps."
    },
    {
      "question": "How does the Template Design Pattern affect code reuse?",
      "correctAnswers": ["It promotes code reuse by allowing common steps to be shared across subclasses"],
      "incorrectAnswers": ["It reduces code reuse by forcing subclasses to implement all steps themselves", "It introduces duplication by requiring multiple class hierarchies", "It eliminates the need for inheritance in code reuse"],
      "explanation": "The Template Design Pattern facilitates code reuse by allowing common steps of an algorithm to be defined once in the base class."
    },
    {
      "question": "Which design principle is supported by the Template Design Pattern?",
      "correctAnswers": ["Favoring composition over inheritance"],
      "incorrectAnswers": ["Defining methods in concrete classes instead of abstract classes", "Ensuring all classes in a system are tightly coupled", "Minimizing the use of interfaces in the design"],
      "explanation": "The Template Design Pattern encourages a combination of inheritance and polymorphism, but also allows flexibility and customization through subclass composition."
    },
    {
      "question": "Which method in a Template Design Pattern is most commonly defined as final to prevent modification?",
      "correctAnswers": ["The template method"],
      "incorrectAnswers": ["Abstract methods", "Concrete methods", "Hook methods"],
      "explanation": "The template method defines the overall algorithm structure and is typically marked as final to prevent modification by subclasses."
    },
    {
      "question": "What is the relationship between a base class and its subclasses in the Template Design Pattern?",
      "correctAnswers": ["The base class provides the general algorithm, and subclasses can override specific steps"],
      "incorrectAnswers": ["The base class must be abstract, and the subclasses are responsible for the entire algorithm", "Subclasses do not interact with the base class's methods", "The base class implements the full algorithm, and subclasses cannot override anything"],
      "explanation": "In the Template Design Pattern, the base class implements the general structure of the algorithm, while subclasses can override specific steps."
    },
    {
      "question": "What type of method would typically be used to allow subclasses to add additional behavior in a Template Design Pattern?",
      "correctAnswers": ["Hook method"],
      "incorrectAnswers": ["Template method", "Abstract method", "Final method"],
      "explanation": "A hook method is a method that provides a default implementation and allows subclasses to override it to add specific behavior."
    },
    {
      "question": "Which of the following best describes the template method in the Template Design Pattern?",
      "correctAnswers": ["A method that defines the overall structure of an algorithm but delegates certain steps to subclasses"],
      "incorrectAnswers": ["A method that implements all steps of the algorithm", "A method that must be implemented by subclasses", "A method that is abstract and cannot be called directly"],
      "explanation": "The template method outlines the steps of the algorithm, delegating specific actions to subclasses through abstract methods."
    },
    {
      "question": "What is the purpose of abstract methods in the Template Design Pattern?",
      "correctAnswers": ["To allow subclasses to define specific behavior for certain steps of the algorithm"],
      "incorrectAnswers": ["To define the structure of the entire algorithm", "To create a method that cannot be overridden by subclasses", "To implement the common behavior across all subclasses"],
      "explanation": "Abstract methods allow subclasses to provide specific implementations for parts of the algorithm defined in the base class."
    },
    {
      "question": "Which pattern is often confused with the Template Design Pattern?",
      "correctAnswers": ["Strategy pattern"],
      "incorrectAnswers": ["Observer pattern", "Factory pattern", "Decorator pattern"],
      "explanation": "The Strategy pattern is similar because both patterns involve using different algorithms or behaviors, but the Template pattern focuses on algorithm structure and overriding steps."
    },
    {
      "question": "Which is a potential downside of using the Template Design Pattern?",
      "correctAnswers": ["It can lead to tightly coupled code if not used properly"],
      "incorrectAnswers": ["It requires a large amount of boilerplate code", "It leads to too many subclasses", "It forces the use of abstract classes for every algorithm"],
      "explanation": "One potential downside is that the Template Design Pattern can introduce tight coupling between the base class and subclasses if overused."
    },
    {
      "question": "How does the Template Design Pattern handle algorithm variations across subclasses?",
      "correctAnswers": ["By allowing subclasses to override certain steps of the algorithm"],
      "incorrectAnswers": ["By providing a completely different algorithm for each subclass", "By forcing every subclass to follow the exact same algorithm", "By making the entire algorithm configurable through a configuration file"],
      "explanation": "The Template Design Pattern allows for variations by permitting subclasses to override specific steps of the template method."
    },
    {
      "question": "How can you modify the Template Design Pattern to include more flexibility in the steps of an algorithm?",
      "correctAnswers": ["By introducing hook methods that can be optionally overridden by subclasses"],
      "incorrectAnswers": ["By making the entire algorithm dynamic through external configuration", "By forcing every step to be implemented in the base class", "By removing inheritance and using interfaces exclusively"],
      "explanation": "Hook methods provide additional flexibility, allowing subclasses to optionally override or skip certain steps in the algorithm."
    },
    {
      "question": "What is a typical characteristic of a subclass that implements a Template Design Pattern?",
      "correctAnswers": ["It implements the abstract methods to customize parts of the algorithm"],
      "incorrectAnswers": ["It implements the entire algorithm without relying on the base class", "It inherits the entire algorithm without customization", "It uses composition instead of inheritance to define the behavior"],
      "explanation": "A subclass implementing the Template Design Pattern customizes parts of the algorithm by overriding abstract methods from the base class."
    },
    {
      "question": "In the Template Design Pattern, how are common algorithm steps typically handled?",
      "correctAnswers": ["They are implemented in the base class to avoid duplication"],
      "incorrectAnswers": ["They are implemented in every subclass", "They are excluded from the design entirely", "They are implemented using external helper functions"],
      "explanation": "The Template Design Pattern allows common steps to be implemented in the base class, ensuring code reuse and minimizing duplication."
    },
    {
      "question": "Which of the following is NOT a typical advantage of the Template Design Pattern?",
      "correctAnswers": ["It enforces uniformity in the implementation of each algorithm step"],
      "incorrectAnswers": ["It promotes code reuse through the base class", "It allows customization of specific algorithm steps", "It simplifies subclass creation for different variations of an algorithm"],
      "explanation": "While the Template Design Pattern allows for flexibility, it does not enforce strict uniformity for each step, as it allows subclasses to override specific parts."
    }
  ]
  