[
    {
        "question": "What is the primary purpose of the Facade design pattern?",
        "correctAnswers": ["To simplify the interface of a complex subsystem"],
        "incorrectAnswers": [
            "To enforce strict access control to the components of a system",
            "To establish communication between unrelated classes",
            "To create multiple interfaces for the same functionality"
        ],
        "explanation": "The Facade design pattern simplifies a complex system by providing a unified and easier-to-use interface."
    },
    {
        "question": "In which scenario is the Facade design pattern most useful?",
        "correctAnswers": ["When working with a complex subsystem"],
        "incorrectAnswers": [
            "When designing a system that requires real-time updates",
            "When you need to dynamically add new components to a system",
            "When the system's complexity is low and components are independent"
        ],
        "explanation": "The Facade design pattern is useful for simplifying access to a complex subsystem by providing a unified interface."
    },
    {
        "question": "Which of these is a key characteristic of the Facade design pattern?",
        "correctAnswers": ["It shields clients from the complexity of subsystems"],
        "incorrectAnswers": [
            "It requires clients to interact with all components individually",
            "It enforces strict data validation at each layer",
            "It supports multiple inheritance to handle dependencies"
        ],
        "explanation": "The Facade pattern acts as a shield by providing a simplified interface to a complex system, making it easier for clients to use."
    },
    {
        "question": "How does the Facade pattern improve code maintainability?",
        "correctAnswers": ["By reducing the dependency on complex subsystems"],
        "incorrectAnswers": [
            "By making the code completely independent of interfaces",
            "By replacing all subsystem classes with a single class",
            "By enforcing direct interaction with all subsystem components"
        ],
        "explanation": "The Facade pattern reduces direct dependencies on subsystems, making the system easier to maintain and modify."
    },
    {
        "question": "What does the Facade pattern provide to clients?",
        "correctAnswers": ["A single entry point to a subsystem"],
        "incorrectAnswers": [
            "Direct access to all subsystem classes",
            "A mechanism to replace subsystems at runtime",
            "An alternative to object-oriented programming"
        ],
        "explanation": "The Facade pattern offers a single entry point for clients to interact with a subsystem, hiding its complexity."
    },
    {
        "question": "What role does the Facade class play in the design pattern?",
        "correctAnswers": ["It provides a unified interface to the subsystem"],
        "incorrectAnswers": [
            "It acts as the subsystem's implementation detail",
            "It directly interacts with the client and bypasses the subsystem",
            "It enforces access control by limiting subsystem usage"
        ],
        "explanation": "The Facade class simplifies the subsystem by providing a unified interface that clients can use."
    },
    {
        "question": "Which principle does the Facade pattern follow?",
        "correctAnswers": ["Separation of concerns"],
        "incorrectAnswers": [
            "High coupling between classes",
            "Polymorphism as the core principle",
            "Encapsulation of client logic within the subsystem"
        ],
        "explanation": "The Facade pattern supports separation of concerns by isolating the client from the internal complexity of subsystems."
    },
    {
        "question": "Which is NOT an advantage of using the Facade pattern?",
        "correctAnswers": ["It reduces system performance by adding an extra layer"],
        "incorrectAnswers": [
            "It simplifies the usage of a complex subsystem",
            "It improves code readability for clients",
            "It minimizes direct dependency on subsystems"
        ],
        "explanation": "The Facade pattern generally improves usability and code maintainability, not reducing system performance."
    },
    {
        "question": "What happens if you modify the Facade class?",
        "correctAnswers": ["It may affect all clients using the Facade"],
        "incorrectAnswers": [
            "It has no impact on the subsystem's functionality",
            "It requires rewriting the subsystem's core logic",
            "It only affects one specific client at a time"
        ],
        "explanation": "Changes to the Facade can impact all clients relying on it since it acts as a central interface."
    },
    {
        "question": "What does the Facade pattern hide from the client?",
        "correctAnswers": ["The internal implementation details of the subsystem"],
        "incorrectAnswers": [
            "All interactions with external APIs",
            "The business logic of the entire application",
            "The architectural design of the system"
        ],
        "explanation": "The Facade pattern hides the subsystem's complexity, exposing only a simple interface to the client."
    },
    {
        "question": "Can the Facade pattern include additional behavior beyond the subsystem's capabilities?",
        "correctAnswers": ["Yes, to simplify or adapt client requirements"],
        "incorrectAnswers": [
            "No, it must strictly mirror the subsystem",
            "Yes, but only if it replaces the subsystem completely",
            "No, as it only forwards calls without modification"
        ],
        "explanation": "The Facade pattern can add extra behavior to simplify or meet client requirements while using the subsystem."
    },
    {
        "question": "What is a potential drawback of using the Facade pattern?",
        "correctAnswers": ["It can become a bottleneck if overused"],
        "incorrectAnswers": [
            "It requires redesigning the entire subsystem",
            "It forces direct access to subsystem components",
            "It eliminates encapsulation in the design"
        ],
        "explanation": "Over-relying on the Facade can create a bottleneck, as all client requests go through a single point."
    },
    {
        "question": "Which type of pattern is the Facade design pattern categorized under?",
        "correctAnswers": ["Structural pattern"],
        "incorrectAnswers": [
            "Creational pattern",
            "Behavioral pattern",
            "Singleton pattern"
        ],
        "explanation": "The Facade pattern is a structural pattern, as it simplifies the structure of a complex system by providing a unified interface."
    },
    {
        "question": "Which of the following best describes the Facade pattern's design intent?",
        "correctAnswers": ["Provide a simplified interface to a subsystem"],
        "incorrectAnswers": [
            "Encourage inheritance and polymorphism in subsystems",
            "Replace subsystems with a more efficient implementation",
            "Combine multiple design patterns into a single solution"
        ],
        "explanation": "The Facade pattern's primary goal is to simplify access to a complex system by providing a straightforward interface."
    },
    {
        "question": "How does the Facade pattern affect system flexibility?",
        "correctAnswers": ["It increases flexibility by decoupling clients and subsystems"],
        "incorrectAnswers": [
            "It reduces flexibility by tightly coupling clients and subsystems",
            "It eliminates the need for subsystem changes",
            "It limits the ability to add new features to the system"
        ],
        "explanation": "By decoupling clients from subsystems, the Facade pattern increases flexibility, making it easier to modify or extend subsystems."
    },
    {
        "question": "Which of the following is NOT true about the Facade pattern?",
        "correctAnswers": ["It forces clients to interact with subsystems directly"],
        "incorrectAnswers": [
            "It hides subsystem complexity from clients",
            "It can be used alongside other design patterns",
            "It simplifies client interaction with a system"
        ],
        "explanation": "The Facade pattern explicitly avoids forcing clients to interact directly with subsystems."
    },
    {
        "question": "Can a system have multiple Facades?",
        "correctAnswers": ["Yes, for different subsystems or functionalities"],
        "incorrectAnswers": [
            "No, a system can only have one Facade",
            "Yes, but only in small-scale systems",
            "No, multiple Facades would cause tight coupling"
        ],
        "explanation": "A system can have multiple Facades, each providing a unified interface to different parts of the system."
    },
    {
        "question": "How does the Facade pattern help new developers on a project?",
        "correctAnswers": ["It reduces the learning curve by abstracting subsystem details"],
        "incorrectAnswers": [
            "It provides detailed documentation for all subsystem components",
            "It eliminates the need for understanding the system architecture",
            "It forces developers to work with each component individually"
        ],
        "explanation": "By hiding subsystem complexity, the Facade pattern helps new developers focus on using the provided interface rather than understanding every component."
    },
    {
        "question": "Which programming concept aligns most closely with the Facade pattern?",
        "correctAnswers": ["Abstraction"],
        "incorrectAnswers": [
            "Encapsulation",
            "Polymorphism",
            "Inheritance"
        ],
        "explanation": "The Facade pattern aligns with abstraction as it hides subsystem complexities behind a simplified interface."
    },
    {
        "question": "Which of the following design patterns is most complementary to the Facade pattern?",
        "correctAnswers": ["Adapter pattern"],
        "incorrectAnswers": [
            "Singleton pattern",
            "Strategy pattern",
            "Observer pattern"
        ],
        "explanation": "The Adapter pattern complements the Facade pattern by helping adapt interfaces between clients and subsystems if needed."
    }
]
