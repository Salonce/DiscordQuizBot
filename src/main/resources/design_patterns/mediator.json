[
    {
        "question": "What is the main purpose of the Mediator Design Pattern?",
        "correctAnswers": ["To centralize communication between objects"],
        "incorrectAnswers": ["To create objects using a prototype instance", "To define a dependency between objects and notify them of changes", "To allow multiple algorithms to be interchangeable"],
        "explanation": "The Mediator Design Pattern centralizes complex communications and control logic between objects, making them easier to maintain."
    },
    {
        "question": "Which design principle does the Mediator Pattern promote?",
        "correctAnswers": ["Reducing coupling between objects"],
        "incorrectAnswers": ["Increasing object inheritance", "Encapsulating object instantiation", "Defining new behaviors dynamically"],
        "explanation": "The Mediator Pattern reduces coupling between objects by letting them communicate through a mediator instead of directly."
    },
    {
        "question": "What role does the mediator object play in the Mediator Pattern?",
        "correctAnswers": ["It handles communication between other objects"],
        "incorrectAnswers": ["It extends the behavior of objects at runtime", "It creates new objects by cloning prototypes", "It provides a global point of access to a single instance"],
        "explanation": "In the Mediator Pattern, the mediator object manages communication between other objects, simplifying their relationships."
    },
    {
        "question": "Which of the following best describes the Mediator Design Pattern?",
        "correctAnswers": ["A pattern that encapsulates how objects interact"],
        "incorrectAnswers": ["A pattern that defines the steps of an algorithm", "A pattern that enables multiple implementations of an abstraction", "A pattern that allows behavior to change based on object state"],
        "explanation": "The Mediator Design Pattern encapsulates how a set of objects interact, reducing direct dependencies."
    },
    {
        "question": "How does the Mediator Design Pattern affect system maintenance?",
        "correctAnswers": ["It simplifies maintenance by reducing dependencies between objects"],
        "incorrectAnswers": ["It complicates maintenance by adding multiple layers", "It promotes tight coupling for better control", "It makes debugging difficult by hiding object interactions"],
        "explanation": "By reducing dependencies between objects, the Mediator Pattern simplifies system maintenance and increases flexibility."
    },
    {
        "question": "What problem does the Mediator Pattern solve in complex systems?",
        "correctAnswers": ["Spaghetti code due to direct communication between objects"],
        "incorrectAnswers": ["Difficulty in managing object lifecycles", "Inconsistent data across shared resources", "Limited reuse of object behavior"],
        "explanation": "The Mediator Pattern addresses the complexity caused by direct communication between multiple objects, often referred to as spaghetti code."
    },
    {
        "question": "In the Mediator Pattern, what do the 'colleagues' represent?",
        "correctAnswers": ["Objects that communicate through the mediator"],
        "incorrectAnswers": ["Objects that independently handle system state", "Objects that encapsulate shared functionality", "Objects that control the flow of algorithms"],
        "explanation": "In the Mediator Pattern, 'colleagues' are the objects that rely on the mediator to coordinate their communication."
    },
    {
        "question": "Which of the following is a disadvantage of the Mediator Pattern?",
        "correctAnswers": ["The mediator can become overly complex"],
        "incorrectAnswers": ["It increases coupling between objects", "It reduces flexibility in object interactions", "It eliminates reusability of object behaviors"],
        "explanation": "A potential drawback of the Mediator Pattern is that the mediator object can become overly complex if it handles too many responsibilities."
    },
    {
        "question": "What is a real-world analogy for the Mediator Pattern?",
        "correctAnswers": ["An air traffic control system coordinating airplanes"],
        "incorrectAnswers": ["A factory creating objects on demand", "A chain of handlers processing requests sequentially", "A blueprint defining the structure of an algorithm"],
        "explanation": "The Mediator Pattern is similar to an air traffic control system, which manages communication and interactions between airplanes."
    },
    {
        "question": "What is the primary benefit of using the Mediator Pattern?",
        "correctAnswers": ["It reduces direct dependencies between objects"],
        "incorrectAnswers": ["It increases the speed of communication", "It eliminates the need for object hierarchies", "It simplifies algorithm implementation within objects"],
        "explanation": "The Mediator Pattern reduces direct dependencies between objects, leading to a more modular and maintainable design."
    },
    {
        "question": "Which design pattern is commonly confused with the Mediator Pattern?",
        "correctAnswers": ["Observer Pattern"],
        "incorrectAnswers": ["Prototype Pattern", "Builder Pattern", "Chain of Responsibility Pattern"],
        "explanation": "The Observer Pattern is sometimes confused with the Mediator Pattern because both deal with communication, but they solve different problems."
    },
    {
        "question": "In the Mediator Pattern, how does communication occur between objects?",
        "correctAnswers": ["Through a centralized mediator object"],
        "incorrectAnswers": ["Directly between objects", "Via a shared static method", "Using a global event handler"],
        "explanation": "Communication between objects in the Mediator Pattern is handled via a centralized mediator, rather than directly."
    },
    {
        "question": "What does the Mediator Pattern help prevent?",
        "correctAnswers": ["Tightly coupled object dependencies"],
        "incorrectAnswers": ["Uncontrolled creation of new instances", "Confusion in algorithm implementation", "Dynamic modification of object behavior"],
        "explanation": "The Mediator Pattern prevents tightly coupled object dependencies by introducing a mediator to manage interactions."
    },
    {
        "question": "How does the Mediator Pattern align with the Single Responsibility Principle?",
        "correctAnswers": ["By centralizing communication, objects have fewer responsibilities"],
        "incorrectAnswers": ["By handling object creation centrally", "By enforcing state-specific behaviors", "By allowing flexible hierarchy modifications"],
        "explanation": "The Mediator Pattern aligns with the Single Responsibility Principle by offloading communication responsibilities to the mediator."
    },
    {
        "question": "Which scenario is most suitable for using the Mediator Pattern?",
        "correctAnswers": ["A chat application with multiple users interacting"],
        "incorrectAnswers": ["A library system cloning book objects", "A graphics editor with shapes having dynamic behavior", "A queue system processing sequential tasks"],
        "explanation": "A chat application is a good fit for the Mediator Pattern, as it centralizes communication between users."
    },
    {
        "question": "What kind of relationship is reduced between objects in the Mediator Pattern?",
        "correctAnswers": ["Direct dependencies"],
        "incorrectAnswers": ["Hierarchical dependencies", "Dynamic method dispatching", "Static method calls"],
        "explanation": "The Mediator Pattern reduces direct dependencies, making object relationships more modular."
    },
    {
        "question": "Which aspect of object interaction does the Mediator Pattern abstract?",
        "correctAnswers": ["Communication logic"],
        "incorrectAnswers": ["State transitions", "Algorithm execution", "Object construction"],
        "explanation": "The Mediator Pattern abstracts communication logic, enabling more manageable and reusable interactions between objects."
    },
    {
        "question": "How does the Mediator Pattern improve scalability in large systems?",
        "correctAnswers": ["By modularizing communication into a single mediator"],
        "incorrectAnswers": ["By allowing direct communication between objects", "By eliminating dependency injection", "By enforcing strict object hierarchies"],
        "explanation": "The Mediator Pattern improves scalability by modularizing communication into a centralized mediator, reducing complex dependencies."
    },
    {
        "question": "What does the Mediator Pattern replace in systems with many interdependent objects?",
        "correctAnswers": ["Direct communication between objects"],
        "incorrectAnswers": ["Object pooling mechanisms", "Global event handlers", "State-specific logic management"],
        "explanation": "The Mediator Pattern replaces direct communication between objects with a centralized communication mechanism."
    },
    {
        "question": "Which of the following is an example of the Mediator Pattern in real life?",
        "correctAnswers": ["A dispatcher managing communication between departments"],
        "incorrectAnswers": ["A robot duplicating commands to execute tasks", "A scheduler assigning resources to tasks", "A blueprint defining construction steps"],
        "explanation": "A dispatcher coordinating communication between departments is analogous to the Mediator Pattern."
    }
]