[
    {
        "question": "What is the primary purpose of the Singleton design pattern?",
        "correctAnswers": ["To ensure a class has only one instance"],
        "incorrectAnswers": ["To allow multiple instances of a class", "To create a class with no constructors", "To restrict access to the class members"],
        "explanation": "The Singleton pattern restricts the instantiation of a class to a single object, ensuring only one instance is created throughout the application's lifecycle."
    },
    {
        "question": "Which method is typically used to obtain the single instance in a Singleton?",
        "correctAnswers": ["getInstance()"],
        "incorrectAnswers": ["createInstance()", "fetchInstance()", "newInstance()"],
        "explanation": "The `getInstance()` method is the standard way to retrieve the single instance of a Singleton class."
    },
    {
        "question": "What would happen if a Singleton's `getInstance()` method is called multiple times?",
        "correctAnswers": ["It will always return the same instance"],
        "incorrectAnswers": ["It will create a new instance every time", "It will throw an exception", "It will return a null value"],
        "explanation": "The `getInstance()` method ensures that only one instance is created, even if called multiple times."
    },
    {
        "question": "Which of the following is a characteristic of the Singleton pattern?",
        "correctAnswers": ["It has a private constructor"],
        "incorrectAnswers": ["It has multiple constructors", "It is always abstract", "It allows multiple instantiations"],
        "explanation": "A Singleton class has a private constructor to prevent external instantiation, ensuring only one instance is created."
    },
    {
        "question": "What is typically used to ensure thread-safety in a Singleton?",
        "correctAnswers": ["Lazy initialization with synchronized block"],
        "incorrectAnswers": ["Eager initialization with static block", "Multiple instance creation using double-check locking", "Instantiating inside a thread-safe method"],
        "explanation": "Lazy initialization combined with a synchronized block ensures that only one thread can create the instance at a time."
    },
    {
        "question": "Which design principle is violated by the Singleton pattern?",
        "correctAnswers": ["Single Responsibility Principle"],
        "incorrectAnswers": ["Interface Segregation Principle", "Dependency Inversion Principle", "Open/Closed Principle"],
        "explanation": "The Singleton pattern can violate the Single Responsibility Principle by forcing the class to handle its own instance management."
    },
    {
        "question": "What is an alternative to the Singleton pattern for creating shared resources?",
        "correctAnswers": ["Dependency Injection"],
        "incorrectAnswers": ["Global variables", "Factory pattern", "Observer pattern"],
        "explanation": "Dependency Injection allows the management of shared resources without the need for a global Singleton instance."
    },
    {
        "question": "In a multithreaded environment, which of the following ensures that only one instance of a Singleton is created?",
        "correctAnswers": ["Double-Checked Locking"],
        "incorrectAnswers": ["Thread-safe Singleton", "Static initialization", "Mutex pattern"],
        "explanation": "Double-Checked Locking ensures that the Singleton is created only once, even in a multithreaded environment, by reducing synchronization overhead."
    },
    {
        "question": "Which of the following is a potential drawback of using the Singleton pattern?",
        "correctAnswers": ["It can introduce global state"],
        "incorrectAnswers": ["It makes unit testing easier", "It allows easy extension of the class", "It avoids object initialization overhead"],
        "explanation": "The Singleton pattern can introduce global state, which makes it harder to test and can lead to tight coupling between components."
    },
    {
        "question": "What is a common use case for the Singleton pattern?",
        "correctAnswers": ["Logging services"],
        "incorrectAnswers": ["Database connections", "User authentication", "Network communication"],
        "explanation": "Singleton is often used for services like logging, where a single instance throughout the application is sufficient."
    },
    {
        "question": "How can the Singleton pattern be made thread-safe in Java?",
        "correctAnswers": ["By using `synchronized` keyword on `getInstance()` method"],
        "incorrectAnswers": ["By making the constructor public", "By using `volatile` keyword", "By using an enum to implement Singleton"],
        "explanation": "Using `synchronized` ensures that only one thread can access the `getInstance()` method at a time, making it thread-safe."
    },
    {
        "question": "Which of the following best describes an issue with the Singleton pattern in testing?",
        "correctAnswers": ["It introduces global state, making it hard to isolate tests"],
        "incorrectAnswers": ["It allows easy mocking of dependencies", "It ensures all tests run in isolation", "It improves testability by providing a single access point"],
        "explanation": "The global state introduced by Singleton can interfere with testing, making it harder to isolate individual tests."
    },
    {
        "question": "What is a key difference between the Singleton pattern and the Factory pattern?",
        "correctAnswers": ["Singleton ensures only one instance of a class", "Factory creates different instances of a class based on input", "Singleton is concerned with instance management", "Factory is focused on object creation logic"],
        "incorrectAnswers": ["Singleton creates objects with varied parameters", "Factory restricts object creation to one instance", "Singleton and Factory serve the same purpose"],
        "explanation": "The Singleton pattern restricts a class to one instance, whereas the Factory pattern allows creation of multiple instances based on input conditions."
    },
    {
        "question": "Which design pattern is commonly used to manage the lifecycle of a Singleton in a more flexible way?",
        "correctAnswers": ["Dependency Injection"],
        "incorrectAnswers": ["Prototype", "Observer", "Abstract Factory"],
        "explanation": "Dependency Injection can be used to manage the lifecycle of a Singleton in a more flexible manner, enabling easier testing and configuration."
    },
    {
        "question": "What is the primary benefit of using Singleton in resource-heavy applications?",
        "correctAnswers": ["Minimizes memory usage by sharing a single instance"],
        "incorrectAnswers": ["Increases flexibility by allowing multiple instances", "Improves testability by simplifying state management", "Provides automatic synchronization in multithreaded applications"],
        "explanation": "In resource-heavy applications, the Singleton pattern ensures that only one instance of the resource is created, minimizing memory usage."
    },
    {
        "question": "What is an example of a Singleton in the Java Standard Library?",
        "correctAnswers": ["Runtime class"],
        "incorrectAnswers": ["StringBuilder class", "Thread class", "File class"],
        "explanation": "The `Runtime` class in Java is a Singleton, as it provides access to the runtime environment and only one instance exists per application."
    },
    {
        "question": "Which of the following is a major downside to the Singleton pattern in large applications?",
        "correctAnswers": ["It can become a bottleneck for application scalability"],
        "incorrectAnswers": ["It encourages code reuse", "It makes it easier to write concurrent code", "It simplifies data access patterns"],
        "explanation": "The Singleton pattern can introduce a bottleneck by centralizing access to shared resources, limiting scalability in large applications."
    },
    {
        "question": "How can you implement a Singleton class using an enum in Java?",
        "correctAnswers": ["By defining a single element in the enum"],
        "incorrectAnswers": ["By defining a public static instance in the enum", "By using a static factory method in the enum", "By synchronizing the enum constructor"],
        "explanation": "In Java, the Singleton pattern can be implemented using an enum, which guarantees that only one instance is created and handles serialization automatically."
    },
    {
        "question": "Which of the following is a potential issue with Singleton in a multi-tenant application?",
        "correctAnswers": ["It could share state across different tenants unintentionally"],
        "incorrectAnswers": ["It makes it easy to scale tenant-specific services", "It helps maintain separate instances for each tenant", "It simplifies data isolation between tenants"],
        "explanation": "In multi-tenant applications, a Singleton might inadvertently share state between tenants, violating data isolation requirements."
    }
]
