[
	{
		"question": "Which method is used to convert a Stream into a List?",
		"correctAnswers": ["collect(Collectors.toList())"],
		"incorrectAnswers": ["toList()", "streamToList()", "convertToList()"],
		"explanation": "The collect(Collectors.toList()) method is used to accumulate elements of a Stream into a List."
	},
	{
		"question": "Which operation is considered terminal in Java Streams?",
		"correctAnswers": ["forEach()"],
		"incorrectAnswers": ["map()", "filter()", "distinct()"],
		"explanation": "forEach() is a terminal operation that consumes the Stream and applies the given action to its elements."
	},
	{
		"question": "What is the purpose of the filter() method in Java Streams?",
		"correctAnswers": ["To select elements based on a condition"],
		"incorrectAnswers": ["To transform elements", "To sort elements", "To collect elements"],
		"explanation": "filter() is an intermediate operation used to include only elements that match a given predicate."
	},
	{
		"question": "Which method is used to transform each element in a Stream?",
		"correctAnswers": ["map()"],
		"incorrectAnswers": ["filter()", "flatMap()", "reduce()"],
		"explanation": "The map() method applies a function to each element in the Stream and produces a new Stream of transformed elements."
	},
	{
		"question": "What does the distinct() method do in Java Streams?",
		"correctAnswers": ["Removes duplicate elements from the Stream"],
		"incorrectAnswers": ["Sorts the elements", "Filters out null values", "Aggregates the elements"],
		"explanation": "The distinct() method is used to eliminate duplicate elements in the Stream, producing a Stream with unique elements."
	},
	{
		"question": "Which method would you use to limit the number of elements in a Stream?",
		"correctAnswers": ["limit()"],
		"incorrectAnswers": ["reduce()", "skip()", "truncate()"],
		"explanation": "The limit() method is an intermediate operation that limits the Stream to a given number of elements."
	},
	{
		"question": "What does the flatMap() method do in Java Streams?",
		"correctAnswers": ["Flattens nested structures into a single Stream"],
		"incorrectAnswers": ["Filters elements", "Sorts elements", "Maps keys to values"],
		"explanation": "The flatMap() method is used to flatten nested collections into a single Stream, often used for processing complex data structures."
	},
	{
		"question": "Which method in Java Streams is used to combine elements into a single result?",
		"correctAnswers": ["reduce()"],
		"incorrectAnswers": ["collect()", "groupBy()", "merge()"],
		"explanation": "The reduce() method combines the elements of a Stream using an associative accumulation function to produce a single result."
	},
	{
		"question": "Which type of Stream handles primitive data types like int, long, and double?",
		"correctAnswers": ["IntStream, LongStream, DoubleStream"],
		"incorrectAnswers": ["PrimitiveStream", "NumericStream", "BaseStream"],
		"explanation": "Java provides specialized Stream types for handling primitive data types: IntStream, LongStream, and DoubleStream."
	},
	{
		"question": "Which method is used to skip a specified number of elements in a Stream?",
		"correctAnswers": ["skip()"],
		"incorrectAnswers": ["limit()", "truncate()", "filter()"],
		"explanation": "The skip() method is an intermediate operation that skips the specified number of elements and returns the remaining elements."
	},
	{
		"question": "What is the default behavior of the sorted() method in Java Streams?",
		"correctAnswers": ["Sorts elements in natural order"],
		"incorrectAnswers": ["Sorts elements in reverse order", "Sorts elements based on a comparator", "Does not sort elements"],
		"explanation": "The sorted() method, by default, arranges elements in their natural order, as determined by their Comparable implementation."
	},
	{
		"question": "Which method converts a Stream into an array?",
		"correctAnswers": ["toArray()"],
		"incorrectAnswers": ["toCollection()", "streamToArray()", "collectToArray()"],
		"explanation": "The toArray() method is used to convert the elements of a Stream into an array."
	},
	{
		"question": "What does the peek() method in Java Streams do?",
		"correctAnswers": ["Performs an action for each element without consuming the Stream"],
		"incorrectAnswers": ["Aggregates elements", "Filters elements", "Maps elements"],
		"explanation": "peek() is mainly used for debugging; it performs a given action on each element without altering or consuming the Stream."
	},
	{
		"question": "What is the purpose of the generate() method in the Stream API?",
		"correctAnswers": ["To create an infinite Stream of elements"],
		"incorrectAnswers": ["To create a Stream from a Collection", "To terminate the Stream", "To combine Streams"],
		"explanation": "generate() is a static method in the Stream class that produces an infinite Stream of elements generated by a Supplier."
	},
	{
		"question": "What is a characteristic of a terminal operation in Java Streams?",
		"correctAnswers": ["It consumes the Stream and produces a result"],
		"incorrectAnswers": ["It processes elements lazily", "It filters elements", "It transforms elements"],
		"explanation": "Terminal operations like collect() or forEach() consume the Stream and produce a final result or side-effect."
	},
	{
		"question": "Which method in Streams is used to perform parallel processing?",
		"correctAnswers": ["parallel()"],
		"incorrectAnswers": ["parallelStream()", "processInParallel()", "multiThread()"],
		"explanation": "The parallel() method is used to convert a sequential Stream into a parallel Stream for parallel processing."
	},
	{
		"question": "What does the anyMatch() method do in Streams?",
		"correctAnswers": ["Checks if any element matches a given predicate"],
		"incorrectAnswers": ["Checks if all elements match a predicate", "Filters elements by predicate", "Matches elements to a key"],
		"explanation": "anyMatch() is a terminal operation that returns true if any element in the Stream matches the given predicate."
	},
	{
		"question": "Which method converts a Stream of elements into a Map?",
		"correctAnswers": ["collect(Collectors.toMap())"],
		"incorrectAnswers": ["mapToMap()", "streamToMap()", "collectToMap()"],
		"explanation": "The collect(Collectors.toMap()) method is used to convert a Stream of elements into a Map by providing key and value mapping functions."
	},
	{
		"question": "What is the purpose of the findFirst() method in Streams?",
		"correctAnswers": ["To retrieve the first element of a Stream"],
		"incorrectAnswers": ["To find a specific element", "To filter the first matching element", "To retrieve the last element"],
		"explanation": "findFirst() is a terminal operation that returns an Optional describing the first element of the Stream."
	},
	{
		"question": "Which operation in Java Streams terminates lazy evaluation?",
		"correctAnswers": ["Terminal operations like collect() or forEach()"],
		"incorrectAnswers": ["Intermediate operations like map()", "Creating a Stream", "Sorting a Stream"],
		"explanation": "Lazy evaluation is terminated by terminal operations such as collect(), forEach(), or reduce(), which process all elements."
	},
    {
        "question": "What does the collect() method in Streams do?",
        "correctAnswers": ["Aggregates elements into a collection or other data structure"],
        "incorrectAnswers": ["Filters elements based on a predicate", "Transforms elements to another type", "Processes elements in parallel"],
        "explanation": "The collect() method is a terminal operation that accumulates Stream elements into a collection or other structure, often using Collectors."
    },
    {
        "question": "Which Stream method returns the count of elements in the Stream?",
        "correctAnswers": ["count()"],
        "incorrectAnswers": ["size()", "length()", "total()"],
        "explanation": "The count() method is a terminal operation that returns the number of elements in the Stream."
    },
    {
        "question": "Which method converts a primitive Stream to an object Stream?",
        "correctAnswers": ["boxed()"],
        "incorrectAnswers": ["wrap()", "convert()", "toStream()"],
        "explanation": "The boxed() method converts a primitive Stream (e.g., IntStream) into a Stream of their corresponding wrapper objects (e.g., Integer)."
    },
    {
        "question": "What does the allMatch() method do in Java Streams?",
        "correctAnswers": ["Checks if all elements match a given predicate"],
        "incorrectAnswers": ["Filters elements based on a predicate", "Checks if at least one element matches a predicate", "Sorts elements before matching"],
        "explanation": "allMatch() is a terminal operation that returns true if all elements in the Stream satisfy the given predicate."
    },
    {
        "question": "Which method in Java Streams terminates evaluation and returns an Optional describing an arbitrary element?",
        "correctAnswers": ["findAny()"],
        "incorrectAnswers": ["findFirst()", "anyMatch()", "getAny()"],
        "explanation": "findAny() is a terminal operation that returns an Optional describing any element of the Stream, particularly useful in parallel Streams."
    },
    {
        "question": "Which method is used to create a Stream from an array?",
        "correctAnswers": ["Arrays.stream()"],
        "incorrectAnswers": ["Stream.fromArray()", "arrayToStream()", "Stream.ofArray()"],
        "explanation": "Arrays.stream() is a utility method for creating a Stream from an array."
    },
    {
        "question": "What does the max() method do in Streams?",
        "correctAnswers": ["Finds the maximum element based on a Comparator"],
        "incorrectAnswers": ["Sorts elements in descending order", "Finds the maximum element without a Comparator", "Returns the largest Stream"],
        "explanation": "max() is a terminal operation that uses a Comparator to find and return the largest element in the Stream wrapped in an Optional."
    },
    {
        "question": "Which method in Java Streams reduces a Stream to its sum?",
        "correctAnswers": ["sum() in primitive Streams like IntStream"],
        "incorrectAnswers": ["reduceSum()", "accumulateSum()", "Stream.sum()"],
        "explanation": "sum() is available in primitive Streams (IntStream, LongStream, etc.) to calculate the sum of elements efficiently."
    },
    {
        "question": "Which method is used to apply a custom Comparator to sort a Stream?",
        "correctAnswers": ["sorted(Comparator)"],
        "incorrectAnswers": ["sortByComparator()", "applySort()", "streamSort(Comparator)"],
        "explanation": "sorted(Comparator) sorts the Stream elements based on the provided Comparator."
    },
    {
        "question": "What happens when a terminal operation is invoked on a Stream?",
        "correctAnswers": ["The Stream pipeline is executed and resources are consumed"],
        "incorrectAnswers": ["The Stream continues to process lazily", "A new Stream is created", "Intermediate operations are skipped"],
        "explanation": "Terminal operations trigger the execution of the Stream pipeline and consume the Stream's resources."
    },
    {
        "question": "Which method generates a sequential Stream from a range of numbers?",
        "correctAnswers": ["IntStream.range()"],
        "incorrectAnswers": ["Stream.range()", "rangeStream()", "numberRange()"],
        "explanation": "IntStream.range() creates a sequential Stream of int values within the specified range."
    },
    {
        "question": "What is the purpose of the empty() method in the Stream API?",
        "correctAnswers": ["Creates an empty Stream with no elements"],
        "incorrectAnswers": ["Terminates the Stream", "Clears all elements in a Stream", "Checks if a Stream is empty"],
        "explanation": "The Stream.empty() method is used to create a Stream with no elements, often as a placeholder."
    },
    {
        "question": "Which Stream operation creates an infinite sequence by applying a function to a seed value?",
        "correctAnswers": ["iterate()"],
        "incorrectAnswers": ["generate()", "seed()", "streamRepeat()"],
        "explanation": "The iterate() method generates an infinite Stream by repeatedly applying a given function to a seed value."
    },
    {
        "question": "Which method is used to concatenate two Streams into a single Stream?",
        "correctAnswers": ["Stream.concat()"],
        "incorrectAnswers": ["mergeStreams()", "combineStreams()", "streamJoin()"],
        "explanation": "Stream.concat() combines two Streams into a single concatenated Stream."
    },
    {
        "question": "What does the Collectors.joining() method do?",
        "correctAnswers": ["Concatenates Stream elements into a single String"],
        "incorrectAnswers": ["Joins multiple Streams", "Combines elements into a List", "Groups elements by key"],
        "explanation": "Collectors.joining() is used to concatenate Stream elements into a single String, optionally with a delimiter."
    },
    {
        "question": "Which method can be used to group Stream elements by a property?",
        "correctAnswers": ["Collectors.groupingBy()"],
        "incorrectAnswers": ["collectByProperty()", "groupElements()", "Stream.groupBy()"],
        "explanation": "Collectors.groupingBy() is a utility method that groups Stream elements by a property defined in a classification function."
    },
    {
        "question": "Which method allows reducing a Stream while maintaining the order of processing?",
        "correctAnswers": ["reduce()"],
        "incorrectAnswers": ["parallelReduce()", "orderedReduce()", "reduceStream()"],
        "explanation": "The reduce() method performs a reduction on the Stream elements using an associative accumulation function while preserving order."
    },
    {
        "question": "What does the noneMatch() method check in Java Streams?",
        "correctAnswers": ["If no elements match the given predicate"],
        "incorrectAnswers": ["If at least one element matches a predicate", "If all elements match a predicate", "If the Stream contains any null elements"],
        "explanation": "noneMatch() is a terminal operation that returns true if no elements in the Stream satisfy the given predicate."
    },
    {
        "question": "What is the default behavior of the Stream.of() method?",
        "correctAnswers": ["Creates a Stream from specified elements"],
        "incorrectAnswers": ["Creates a Stream from a Collection", "Generates an empty Stream", "Returns an infinite Stream"],
        "explanation": "Stream.of() is a factory method that creates a Stream containing the specified elements."
    },
    {
        "question": "Which method creates a Stream from a file’s lines?",
        "correctAnswers": ["Files.lines()"],
        "incorrectAnswers": ["Stream.fileLines()", "lineStream()", "File.toStream()"],
        "explanation": "Files.lines() is a utility method for creating a Stream where each element represents a line from the file."
    }
]
