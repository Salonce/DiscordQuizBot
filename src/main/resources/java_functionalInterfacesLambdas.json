[
    {
        "question": "What is a functional interface in Java?",
        "correctAnswers": ["An interface with exactly one abstract method"],
        "incorrectAnswers": ["An interface with multiple abstract methods", "An interface with no methods", "An interface with only static methods"],
        "explanation": "A functional interface is an interface that contains exactly one abstract method, which can be implemented using a lambda expression."
    },
    {
        "question": "Which annotation is commonly used to indicate a functional interface in Java?",
        "correctAnswers": ["@FunctionalInterface"],
        "incorrectAnswers": ["@Override", "@Interface", "@Lambda"],
        "explanation": "The @FunctionalInterface annotation indicates that an interface is intended to be a functional interface, although it's not required for the interface to be functional."
    },
    {
        "question": "Which method can be used to create a lambda expression for a functional interface?",
        "correctAnswers": ["Using the '->' operator"],
        "incorrectAnswers": ["Using the '::' operator", "Using the '=' operator", "Using the '=>'' operator"],
        "explanation": "The '->' operator is used to define a lambda expression in Java."
    },
    {
        "question": "What is the return type of a lambda expression in Java?",
        "correctAnswers": ["Depends on the functional interface's abstract method"],
        "incorrectAnswers": ["Void", "Boolean", "Integer"],
        "explanation": "The return type of a lambda expression depends on the abstract method of the functional interface it is implementing."
    },
    {
        "question": "Which functional interface represents a function that takes one argument and produces a result?",
        "correctAnswers": ["Function<T, R>"],
        "incorrectAnswers": ["Consumer<T>", "Supplier<T>", "Predicate<T>"],
        "explanation": "The Function<T, R> interface represents a function that accepts a single argument of type T and returns a result of type R."
    },
    {
        "question": "What is the signature of the 'apply' method in the Function interface?",
        "correctAnswers": ["R apply(T t)"],
        "incorrectAnswers": ["void apply(T t)", "R apply(R r)", "T apply(T t)"],
        "explanation": "The 'apply' method in the Function interface has the signature 'R apply(T t)', where T is the input type and R is the output type."
    },
    {
        "question": "Which functional interface represents a function that takes no arguments and produces a result?",
        "correctAnswers": ["Supplier<T>"],
        "incorrectAnswers": ["Consumer<T>", "Function<T, R>", "Predicate<T>"],
        "explanation": "The Supplier<T> interface represents a function that takes no arguments and produces a result of type T."
    },
    {
        "question": "Which functional interface represents an operation that accepts a single argument and returns no result?",
        "correctAnswers": ["Consumer<T>"],
        "incorrectAnswers": ["Function<T, R>", "Supplier<T>", "Predicate<T>"],
        "explanation": "The Consumer<T> interface represents an operation that accepts a single argument of type T and returns no result."
    },
    {
        "question": "Which functional interface represents a condition that tests an argument and returns a boolean value?",
        "correctAnswers": ["Predicate<T>"],
        "incorrectAnswers": ["Function<T, R>", "Consumer<T>", "Supplier<T>"],
        "explanation": "The Predicate<T> interface represents a boolean-valued function of one argument, used to test conditions."
    },
    {
        "question": "Which of the following is the correct way to write a lambda expression for the Runnable interface?",
        "correctAnswers": ["() -> System.out.println('Hello World')"],
        "incorrectAnswers": ["() -> { System.out.println('Hello World'); }", "System.out.println('Hello World')", "Runnable r = () -> System.out.println('Hello World');"],
        "explanation": "The Runnable interface has a single abstract method 'run', which can be implemented using the lambda expression '() -> System.out.println('Hello World')'."
    },
    {
        "question": "What is the default return value of the 'get' method in the Supplier interface?",
        "correctAnswers": ["The value returned by the implemented get() method"],
        "incorrectAnswers": ["Null", "0", "Boolean.TRUE"],
        "explanation": "The 'get' method in the Supplier interface is responsible for returning a result, which can be any value defined in the implementation."
    },
    {
        "question": "What is the purpose of the 'andThen' method in the Consumer interface?",
        "correctAnswers": ["It allows chaining of Consumer operations"],
        "incorrectAnswers": ["It provides a way to return a value", "It executes the operation multiple times", "It transforms the input before consumption"],
        "explanation": "The 'andThen' method allows chaining multiple Consumer operations in sequence, executing them one after another."
    },
    {
        "question": "Which method can be used to compose two functions in the Function interface?",
        "correctAnswers": ["compose"],
        "incorrectAnswers": ["andThen", "merge", "combine"],
        "explanation": "The 'compose' method in the Function interface allows you to compose two functions, applying one function to the result of the other."
    },
    {
        "question": "What is the main advantage of using lambda expressions in Java?",
        "correctAnswers": ["They provide a concise way to write code"],
        "incorrectAnswers": ["They improve the performance of the code", "They make the code easier to debug", "They automatically handle exceptions"],
        "explanation": "Lambda expressions offer a more concise way to write code, reducing boilerplate and improving readability."
    },
    {
        "question": "Which of the following is a valid method reference in Java?",
        "correctAnswers": ["ClassName::methodName"],
        "incorrectAnswers": ["methodName::ClassName", "methodName()", "ClassName.methodName"],
        "explanation": "A valid method reference in Java uses the 'ClassName::methodName' syntax to refer to a method of a class or object."
    },
    {
        "question": "Which method is used to combine two predicates in Java?",
        "correctAnswers": ["and"],
        "incorrectAnswers": ["or", "combine", "merge"],
        "explanation": "The 'and' method in the Predicate interface combines two predicates, returning true if both conditions are true."
    },
    {
        "question": "What is the return type of the 'test' method in the Predicate interface?",
        "correctAnswers": ["boolean"],
        "incorrectAnswers": ["void", "int", "String"],
        "explanation": "The 'test' method in the Predicate interface returns a boolean value, indicating whether the predicate holds true for the input."
    },
    {
        "question": "How do you create a lambda expression that takes two parameters?",
        "correctAnswers": ["(x, y) -> x + y"],
        "incorrectAnswers": ["x, y -> x + y", "() -> x + y", "x -> y + z"],
        "explanation": "A lambda expression that takes two parameters is defined with the syntax '(x, y) -> expression'."
    },
    {
        "question": "Which functional interface can be used to handle a lambda expression that throws an exception?",
        "correctAnswers": ["ThrowingFunction<T, R>"],
        "incorrectAnswers": ["Function<T, R>", "Consumer<T>", "Predicate<T>"],
        "explanation": "ThrowingFunction is a custom interface used to handle lambdas that throw exceptions. It is not part of the standard Java library."
    },
    {
        "question": "Which functional interface represents a function that takes two arguments and returns a result?",
        "correctAnswers": ["BiFunction<T, U, R>"],
        "incorrectAnswers": ["Function<T, R>", "Consumer<T>", "Predicate<T>"],
        "explanation": "The BiFunction<T, U, R> interface represents a function that takes two arguments of types T and U and returns a result of type R."
    },
    {
        "question": "What does the 'andThen' method in the Function interface do?",
        "correctAnswers": ["It allows you to apply a function after the current function"],
        "incorrectAnswers": ["It applies the current function multiple times", "It returns the inverse of the current function", "It combines two functions into one"],
        "explanation": "The 'andThen' method allows you to chain a function that is applied after the current function completes."
    },
    {
        "question": "Which functional interface represents a boolean-valued function of one argument?",
        "correctAnswers": ["Predicate<T>"],
        "incorrectAnswers": ["Function<T, R>", "Supplier<T>", "Consumer<T>"],
        "explanation": "The Predicate<T> interface is a functional interface that represents a function that tests a condition and returns a boolean value."
    },
    {
        "question": "What is the purpose of the 'get' method in the Supplier interface?",
        "correctAnswers": ["It returns a result without taking any arguments"],
        "incorrectAnswers": ["It accepts an argument and returns a result", "It accepts no arguments and performs an action", "It checks a condition and returns a boolean value"],
        "explanation": "The 'get' method in the Supplier interface provides a way to return a result without accepting any input."
    },
    {
        "question": "Which method in the Function interface allows for function composition?",
        "correctAnswers": ["compose"],
        "incorrectAnswers": ["andThen", "combine", "merge"],
        "explanation": "The 'compose' method allows two functions to be combined, with the output of one being used as input for the next."
    },
    {
        "question": "What does the 'apply' method in the Function interface return?",
        "correctAnswers": ["A result of the type specified in the Function interface"],
        "incorrectAnswers": ["A boolean value", "The input value", "The first argument of the function"],
        "explanation": "The 'apply' method in the Function interface returns a result based on the function's logic."
    },
    {
        "question": "Which functional interface is commonly used for lambda expressions that modify a single input?",
        "correctAnswers": ["Consumer<T>"],
        "incorrectAnswers": ["Function<T, R>", "Predicate<T>", "Supplier<T>"],
        "explanation": "The Consumer<T> interface is used to represent an operation that accepts one input argument and does not return any result."
    },
    {
        "question": "Which functional interface represents a function that takes no arguments and returns no result?",
        "correctAnswers": ["Runnable"],
        "incorrectAnswers": ["Consumer<T>", "Supplier<T>", "Function<T, R>"],
        "explanation": "The Runnable interface represents a functional interface that takes no arguments and has no return value."
    },
    {
        "question": "What type of method reference can be used for a static method in Java?",
        "correctAnswers": ["ClassName::staticMethodName"],
        "incorrectAnswers": ["object::instanceMethodName", "this::instanceMethodName", "ClassName::instanceMethodName"],
        "explanation": "A static method reference is made by referencing a class name followed by the static method name using the '::' syntax."
    },
    {
        "question": "Which method in the Predicate interface is used to negate the result of a predicate?",
        "correctAnswers": ["negate"],
        "incorrectAnswers": ["and", "or", "not"],
        "explanation": "The 'negate' method in the Predicate interface inverts the result of the predicate, returning the opposite boolean value."
    },
    {
        "question": "Which functional interface represents a function that takes no arguments and returns a boolean value?",
        "correctAnswers": ["BooleanSupplier"],
        "incorrectAnswers": ["Supplier<T>", "Predicate<T>", "Consumer<T>"],
        "explanation": "The BooleanSupplier interface represents a supplier that provides a boolean value without accepting any arguments."
    },
    {
        "question": "What does the 'or' method in the Predicate interface do?",
        "correctAnswers": ["It combines two predicates with a logical OR operation"],
        "incorrectAnswers": ["It applies two predicates in sequence", "It negates both predicates", "It returns true if either predicate is false"],
        "explanation": "The 'or' method allows you to combine two predicates such that the result is true if either predicate is true."
    },
    {
        "question": "What does the 'merge' method do in a BiFunction interface?",
        "correctAnswers": ["It combines two values into one result"],
        "incorrectAnswers": ["It applies the function multiple times", "It returns a new BiFunction", "It combines two functions into one"],
        "explanation": "The 'merge' method in a BiFunction interface combines two arguments into one result, based on the function logic."
    },
    {
        "question": "Which functional interface is used for lambda expressions that accept two arguments but return no result?",
        "correctAnswers": ["BiConsumer<T, U>"],
        "incorrectAnswers": ["BiFunction<T, U, R>", "Consumer<T>", "Predicate<T>"],
        "explanation": "The BiConsumer<T, U> interface represents a function that accepts two arguments and returns no result."
    },
    {
        "question": "Which of the following is a valid method reference for an instance method in Java?",
        "correctAnswers": ["object::instanceMethod"],
        "incorrectAnswers": ["ClassName::instanceMethod", "this::instanceMethod", "object::staticMethod"],
        "explanation": "An instance method reference refers to a specific object's method using the 'object::instanceMethod' syntax."
    },
    {
        "question": "Which of these interfaces can be used to create a lambda expression that accepts a value and returns a boolean?",
        "correctAnswers": ["Predicate<T>"],
        "incorrectAnswers": ["Function<T, R>", "Consumer<T>", "Supplier<T>"],
        "explanation": "The Predicate<T> interface represents a function that accepts a value and returns a boolean result based on the condition."
    },
    {
        "question": "Which of the following is true about the Supplier interface in Java?",
        "correctAnswers": ["It provides a result without taking any input arguments"],
        "incorrectAnswers": ["It accepts an argument and returns a result", "It checks a condition and returns a boolean", "It consumes a value and does not return anything"],
        "explanation": "The Supplier interface provides a method to return a result without accepting any input arguments."
    },
    {
        "question": "What does the 'run' method in the Runnable interface do?",
        "correctAnswers": ["Executes the code defined in the lambda expression or method reference"],
        "incorrectAnswers": ["Accepts arguments and performs an operation", "Returns a result after executing an operation", "Checks a condition before running the code"],
        "explanation": "The 'run' method in the Runnable interface defines the code that should be executed when the lambda expression or method reference is invoked."
    },
    {
        "question": "Which method in the Function interface allows you to apply the function in reverse order?",
        "correctAnswers": ["andThen"],
        "incorrectAnswers": ["compose", "reverse", "apply"],
        "explanation": "The 'andThen' method in the Function interface allows you to apply another function after the current one has been executed."
    },
    {
        "question": "Which functional interface represents an operation that accepts two arguments and returns a boolean result?",
        "correctAnswers": ["BiPredicate<T, U>"],
        "incorrectAnswers": ["BiFunction<T, U, R>", "Function<T, R>", "Consumer<T>"],
        "explanation": "The BiPredicate<T, U> interface represents a function that takes two arguments and returns a boolean result."
    },
    {
        "question": "Which method in the Consumer interface allows you to perform an action on an input and then chain it with another action?",
        "correctAnswers": ["andThen"],
        "incorrectAnswers": ["compose", "apply", "negate"],
        "explanation": "The 'andThen' method allows chaining of two Consumer actions, performing one after the other."
    },
    {
        "question": "Which functional interface represents a function that accepts two arguments and returns a result of the same type?",
        "correctAnswers": ["BinaryOperator<T>"],
        "incorrectAnswers": ["BiFunction<T, T, T>", "Function<T, T>", "BiPredicate<T, T>"],
        "explanation": "The BinaryOperator<T> interface represents a function that takes two arguments of the same type and returns a result of the same type."
    },
    {
        "question": "Which method in the Predicate interface allows you to combine two predicates with a logical AND operation?",
        "correctAnswers": ["and"],
        "incorrectAnswers": ["or", "not", "compose"],
        "explanation": "The 'and' method allows you to combine two predicates where the result is true only if both predicates are true."
    },
    {
        "question": "What does the 'accept' method in the Consumer interface do?",
        "correctAnswers": ["It performs an operation on the provided argument"],
        "incorrectAnswers": ["It returns a boolean based on the input", "It applies a transformation to the input", "It returns the input unchanged"],
        "explanation": "The 'accept' method in the Consumer interface accepts an input and performs an operation on it without returning any result."
    },
    {
        "question": "Which functional interface is used to define a function that takes one argument and returns a result of a different type?",
        "correctAnswers": ["Function<T, R>"],
        "incorrectAnswers": ["Predicate<T>", "Supplier<T>", "Consumer<T>"],
        "explanation": "The Function<T, R> interface represents a function that accepts an argument of type T and returns a result of type R."
    },
    {
        "question": "What is the main purpose of the 'get' method in the Supplier interface?",
        "correctAnswers": ["To return a result without taking any arguments"],
        "incorrectAnswers": ["To apply a function to the argument", "To check a condition on the input", "To modify the input and return a result"],
        "explanation": "The 'get' method in the Supplier interface allows you to return a result without accepting any input arguments."
    },
    {
        "question": "Which of the following methods is used to chain two functions in the Function interface?",
        "correctAnswers": ["andThen"],
        "incorrectAnswers": ["compose", "apply", "negate"],
        "explanation": "The 'andThen' method in the Function interface is used to chain another function after the current one."
    },
    {
        "question": "What is the return type of the 'apply' method in the Function interface?",
        "correctAnswers": ["The result type specified in the function's return type"],
        "incorrectAnswers": ["Void", "Boolean", "Integer"],
        "explanation": "The 'apply' method returns a result of the type specified in the Function's return type."
    },
    {
        "question": "Which functional interface represents an operation that takes two arguments and returns no result?",
        "correctAnswers": ["BiConsumer<T, U>"],
        "incorrectAnswers": ["BiFunction<T, U, R>", "Function<T, R>", "Predicate<T>"],
        "explanation": "The BiConsumer<T, U> interface is used to define operations that accept two arguments and perform an action without returning a result."
    },
    {
        "question": "Which method in the Predicate interface can be used to negate the condition?",
        "correctAnswers": ["negate"],
        "incorrectAnswers": ["and", "or", "compose"],
        "explanation": "The 'negate' method in the Predicate interface inverts the result of the predicate."
    },
    {
        "question": "What is the purpose of the 'compose' method in the Function interface?",
        "correctAnswers": ["To apply the current function after another function"],
        "incorrectAnswers": ["To combine two functions", "To apply the current function multiple times", "To reverse the order of function execution"],
        "explanation": "The 'compose' method applies the current function after another function, which is the opposite of 'andThen'."
    },
    {
        "question": "Which method in the BiFunction interface allows chaining of another BiFunction?",
        "correctAnswers": ["andThen"],
        "incorrectAnswers": ["compose", "apply", "merge"],
        "explanation": "The 'andThen' method in the BiFunction interface allows chaining another BiFunction to be applied after the first one."
    },
    {
        "question": "Which functional interface allows you to pass a boolean argument and return a result?",
        "correctAnswers": ["BooleanSupplier"],
        "incorrectAnswers": ["Predicate<T>", "Supplier<T>", "Function<T, R>"],
        "explanation": "The BooleanSupplier interface provides a way to return a boolean value without accepting any arguments."
    },
    {
        "question": "Which method in the Runnable interface is used to execute the defined code?",
        "correctAnswers": ["run"],
        "incorrectAnswers": ["start", "execute", "perform"],
        "explanation": "The 'run' method is used to execute the code defined in the Runnable interface."
    },
    {
        "question": "Which functional interface is used to define a function that checks if an input is valid and returns a boolean?",
        "correctAnswers": ["Predicate<T>"],
        "incorrectAnswers": ["Function<T, R>", "Consumer<T>", "Supplier<T>"],
        "explanation": "The Predicate<T> interface is used for functions that check a condition and return a boolean result."
    },
    {
        "question": "What does the 'or' method in the Predicate interface do?",
        "correctAnswers": ["Combines two predicates with a logical OR operation"],
        "incorrectAnswers": ["Combines two predicates with a logical AND operation", "Checks if both predicates are false", "Negates both predicates"],
        "explanation": "The 'or' method allows two predicates to be combined, returning true if either of them is true."
    },
    {
        "question": "Which method in the BiPredicate interface allows combining two predicates with a logical AND operation?",
        "correctAnswers": ["and"],
        "incorrectAnswers": ["or", "negate", "compose"],
        "explanation": "The 'and' method allows two BiPredicates to be combined with a logical AND operation."
    },
    {
        "question": "Which method in the Function interface applies the function to the input and returns the result?",
        "correctAnswers": ["apply"],
        "incorrectAnswers": ["get", "accept", "invoke"],
        "explanation": "The 'apply' method in the Function interface applies the function to the input argument and returns a result."
    },
    {
        "question": "Which functional interface is used to define a function that returns a result and does not accept any arguments?",
        "correctAnswers": ["Supplier<T>"],
        "incorrectAnswers": ["Function<T, R>", "Consumer<T>", "Predicate<T>"],
        "explanation": "The Supplier<T> interface is used to return a result without accepting any input arguments."
    }
]
