[
    {
        "question": "What is the default value of an integer array element in Java?",
        "correctAnswers": ["0"],
        "incorrectAnswers": ["null", "undefined", "1"],
        "explanation": "In Java, elements of an integer array are automatically initialized to 0."
    },
    {
        "question": "Which method is used to get the length of an array in Java?",
        "correctAnswers": ["array.length"],
        "incorrectAnswers": ["array.size()", "array.getLength()", "array.count()"],
        "explanation": "The length of an array in Java is accessed using the 'length' property, not a method."
    },
    {
        "question": "How are arrays in Java indexed?",
        "correctAnswers": ["Zero-based indexing"],
        "incorrectAnswers": ["One-based indexing", "Negative indexing", "Arbitrary indexing"],
        "explanation": "Java arrays are indexed starting from 0, which is known as zero-based indexing."
    },
    {
        "question": "What happens if you try to access an invalid index in an array?",
        "correctAnswers": ["ArrayIndexOutOfBoundsException"],
        "incorrectAnswers": ["IndexError", "NullPointerException", "InvalidIndexException"],
        "explanation": "Accessing an invalid index in a Java array throws an ArrayIndexOutOfBoundsException."
    },
    {
        "question": "What is the runtime complexity of accessing an element in a Java array?",
        "correctAnswers": ["O(1)"],
        "incorrectAnswers": ["O(n)", "O(log n)", "O(n^2)"],
        "explanation": "Accessing an element in an array is a constant time operation (O(1)) because it is indexed."
    },
    {
        "question": "Which data structure can be used to dynamically resize arrays in Java?",
        "correctAnswers": ["ArrayList"],
        "incorrectAnswers": ["LinkedList", "HashMap", "TreeSet"],
        "explanation": "ArrayList is a resizable array-like data structure provided in the Java Collections Framework."
    },
    {
        "question": "What will 'int[] arr = new int[5]' do in Java?",
        "correctAnswers": ["Create an array of 5 integers initialized to 0"],
        "incorrectAnswers": ["Create an array of 5 integers with random values", "Create an empty array", "Throw an error because no values are specified"],
        "explanation": "This initializes an array of size 5 where all elements are set to the default value of 0."
    },
    {
        "question": "Which of the following correctly declares an array in Java?",
        "correctAnswers": ["int[] arr;"],
        "incorrectAnswers": ["int arr[];", "array int[];", "int array;"],
        "explanation": "The correct syntax to declare an array in Java is 'int[] arr;'."
    },
    {
        "question": "Can an array in Java hold elements of different data types?",
        "correctAnswers": ["No"],
        "incorrectAnswers": ["Yes", "Only if using Generics", "Only if they are Objects"],
        "explanation": "In Java, arrays are homogenous, meaning they can only hold elements of the same data type."
    },
    {
        "question": "How do you initialize a Java array with specific values?",
        "correctAnswers": ["int[] arr = {1, 2, 3};"],
        "incorrectAnswers": ["int[] arr = (1, 2, 3);", "int arr[] = new int[1, 2, 3];", "array int[] = {1, 2, 3};"],
        "explanation": "Arrays can be initialized directly with values using curly braces."
    },
    {
        "question": "What is the output of 'arr[arr.length - 1]' in Java?",
        "correctAnswers": ["Last element of the array"],
        "incorrectAnswers": ["First element of the array", "Middle element of the array", "Throws an exception"],
        "explanation": "'arr.length - 1' gives the index of the last element, allowing access to it."
    },
    {
        "question": "How do you copy an array in Java?",
        "correctAnswers": ["System.arraycopy()"],
        "incorrectAnswers": ["Arrays.copy()", "array.clone()", "Array.copyElements()"],
        "explanation": "The System.arraycopy() method is commonly used to copy elements from one array to another."
    },
    {
        "question": "Which utility class provides methods for sorting arrays in Java?",
        "correctAnswers": ["Arrays"],
        "incorrectAnswers": ["Collections", "ArrayUtils", "SortHelper"],
        "explanation": "The 'Arrays' class in Java provides utility methods like sort() to work with arrays."
    },
    {
        "question": "Can a Java array hold null elements?",
        "correctAnswers": ["Yes, if it's an array of objects"],
        "incorrectAnswers": ["No", "Only if it's a String array", "Only if it has a special flag"],
        "explanation": "Arrays of objects in Java can hold null as a valid value."
    },
    {
        "question": "Which statement is true about multi-dimensional arrays in Java?",
        "correctAnswers": ["They are arrays of arrays"],
        "incorrectAnswers": ["They are stored as a single continuous block", "They are immutable", "They are the same as matrices"],
        "explanation": "Multi-dimensional arrays in Java are implemented as arrays of arrays."
    },
    {
        "question": "What does the Arrays.equals() method do?",
        "correctAnswers": ["Compares the contents of two arrays"],
        "incorrectAnswers": ["Compares the memory addresses of arrays", "Checks if the arrays are sorted", "Checks if the arrays are null"],
        "explanation": "The Arrays.equals() method compares the contents of two arrays element by element."
    },
    {
        "question": "What is the initial value of elements in a boolean array?",
        "correctAnswers": ["false"],
        "incorrectAnswers": ["true", "null", "undefined"],
        "explanation": "In Java, boolean array elements are initialized to false by default."
    },
    {
        "question": "Which Java feature ensures type safety for arrays?",
        "correctAnswers": ["Compile-time checks"],
        "incorrectAnswers": ["Runtime checks", "Generics", "Annotations"],
        "explanation": "Java performs compile-time checks to ensure type safety for arrays."
    },
    {
        "question": "How do you iterate over an array using an enhanced for loop?",
        "correctAnswers": ["for (int element : arr)"],
        "incorrectAnswers": ["for (arr : int element)", "foreach (int element in arr)", "forEach(arr as element)"],
        "explanation": "The enhanced for loop uses the syntax 'for (type element : array)' in Java."
    },
    {
        "question": "What is returned by the toString() method of a Java array?",
        "correctAnswers": ["Memory address representation"],
        "incorrectAnswers": ["Contents of the array", "Size of the array", "Hash code of elements"],
        "explanation": "The default toString() method of an array returns a memory address-like string representation."
    },
    {
        "question": "What is the maximum number of elements that an array in Java can hold?",
        "correctAnswers": ["Integer.MAX_VALUE"],
        "incorrectAnswers": ["Long.MAX_VALUE", "Short.MAX_VALUE", "Array.MAX_ELEMENTS"],
        "explanation": "The size of a Java array is limited by Integer.MAX_VALUE, as arrays are indexed with integers."
    },
    {
        "question": "Which keyword is used to create a new array in Java?",
        "correctAnswers": ["new"],
        "incorrectAnswers": ["allocate", "array", "create"],
        "explanation": "The 'new' keyword is used to instantiate a new array in Java."
    },
    {
        "question": "Can a Java array be resized after creation?",
        "correctAnswers": ["No"],
        "incorrectAnswers": ["Yes", "Only if it's not initialized", "Only with dynamic allocation"],
        "explanation": "Arrays in Java have a fixed size once created and cannot be resized directly."
    },
    {
        "question": "How do you check if an array is empty in Java?",
        "correctAnswers": ["arr.length == 0"],
        "incorrectAnswers": ["arr.size() == 0", "arr.isEmpty()", "arr == null"],
        "explanation": "To check if an array is empty, compare its length property with 0."
    },
    {
        "question": "What does 'int[] arr = new int[]{1, 2, 3}' do?",
        "correctAnswers": ["Initializes an array with specific values"],
        "incorrectAnswers": ["Creates an empty array", "Creates a 2D array", "Throws a syntax error"],
        "explanation": "This statement creates and initializes an array with the values 1, 2, and 3."
    },
    {
        "question": "Which method can be used to sort a Java array in descending order?",
        "correctAnswers": ["Arrays.sort(arr, Collections.reverseOrder())"],
        "incorrectAnswers": ["Arrays.sortDesc(arr)", "arr.sortDescending()", "SortUtils.sortDesc(arr)"],
        "explanation": "To sort an array in descending order, use Arrays.sort with a reverse order comparator."
    },
    {
        "question": "How do you convert an array to a List in Java?",
        "correctAnswers": ["Arrays.asList(arr)"],
        "incorrectAnswers": ["arr.toList()", "ArrayList.fromArray(arr)", "arr.convertToList()"],
        "explanation": "The Arrays.asList method converts an array to a fixed-size List."
    },
    {
        "question": "What is the output of Arrays.toString(arr) for an array?",
        "correctAnswers": ["Readable string representation of the array"],
        "incorrectAnswers": ["The array's memory address", "The hash code of the array", "The length of the array"],
        "explanation": "Arrays.toString provides a human-readable string representation of the array's elements."
    },
    {
        "question": "How do you fill all elements of an array with a specific value?",
        "correctAnswers": ["Arrays.fill(arr, value)"],
        "incorrectAnswers": ["arr.fill(value)", "FillUtils.fillArray(arr, value)", "arr.setAll(value)"],
        "explanation": "The Arrays.fill method is used to assign a specific value to all elements in the array."
    },
    {
        "question": "Can an array in Java have a negative size?",
        "correctAnswers": ["No"],
        "incorrectAnswers": ["Yes", "Only if it's initialized later", "Only for certain types"],
        "explanation": "An array cannot have a negative size; attempting to create one will throw a NegativeArraySizeException."
    },
    {
        "question": "Which operator is used to access elements of an array?",
        "correctAnswers": ["[]"],
        "incorrectAnswers": ["()", "{}", "<>"],
        "explanation": "Square brackets ([]) are used to access elements of an array by their index."
    },
    {
        "question": "What will happen if you try to declare an array with zero size in Java?",
        "correctAnswers": ["An empty array will be created"],
        "incorrectAnswers": ["It will throw an exception", "The array will be null", "The compiler will show an error"],
        "explanation": "Declaring an array with size zero creates a valid, empty array."
    },
    {
        "question": "Can a Java array store both primitive types and objects?",
        "correctAnswers": ["No, it must be either primitive types or objects"],
        "incorrectAnswers": ["Yes, it can store both", "Only if it's an Object array", "Only in specific configurations"],
        "explanation": "Java arrays are type-specific and can only hold elements of a single type, either primitives or objects."
    },
    {
        "question": "What will 'new int[2][3]' create?",
        "correctAnswers": ["A 2x3 2D array"],
        "incorrectAnswers": ["A 3x2 2D array", "A single-dimensional array", "An error"],
        "explanation": "The declaration 'new int[2][3]' creates a two-dimensional array with 2 rows and 3 columns."
    },
    {
        "question": "How do you compare two arrays for equality in Java?",
        "correctAnswers": ["Arrays.equals(arr1, arr2)"],
        "incorrectAnswers": ["arr1 == arr2", "arr1.equals(arr2)", "CompareUtils.areEqual(arr1, arr2)"],
        "explanation": "Arrays.equals compares the contents of two arrays for equality."
    },
    {
        "question": "What is the syntax to declare a multi-dimensional array in Java?",
        "correctAnswers": ["int[][] arr;"],
        "incorrectAnswers": ["int arr[][][];", "int[2][3] arr;", "multiDim int[][];"],
        "explanation": "Multi-dimensional arrays are declared using multiple sets of square brackets."
    },
    {
        "question": "Which statement about array memory allocation is true in Java?",
        "correctAnswers": ["Array memory is allocated on the heap"],
        "incorrectAnswers": ["Array memory is allocated on the stack", "Array memory is dynamically allocated", "Array memory is statically allocated"],
        "explanation": "In Java, arrays are objects, so their memory is allocated on the heap."
    },
    {
        "question": "How do you initialize a 2D array with values in Java?",
        "correctAnswers": ["int[][] arr = {{1, 2}, {3, 4}};"],
        "incorrectAnswers": ["int[][] arr = new int[1, 2, 3, 4];", "int arr[][] = (1, 2, 3, 4);", "new int[][] = {1, 2, 3, 4};"],
        "explanation": "Two-dimensional arrays can be initialized with nested curly braces containing their elements."
    },
    {
        "question": "What is the type of elements in an array declared as 'Object[] arr'?",
        "correctAnswers": ["Object"],
        "incorrectAnswers": ["String", "Integer", "Depends on the value"],
        "explanation": "An array declared as 'Object[]' can hold any objects, as Object is the superclass of all classes in Java."
    },
    {
        "question": "Which method can be used to perform binary search on a sorted array in Java?",
        "correctAnswers": ["Arrays.binarySearch(arr, key)"],
        "incorrectAnswers": ["arr.searchBinary(key)", "BinarySearchUtils.search(arr, key)", "arr.findBinary(key)"],
        "explanation": "The Arrays.binarySearch method is used to perform binary search on a sorted array."
    }
]
